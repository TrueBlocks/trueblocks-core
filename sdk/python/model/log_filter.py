# coding: utf-8

"""
    TrueBlocks API

     A REST layer over the TrueBlocks application. With `chifra daemon`, you can run this on your own machine, and make calls to `localhost`. ## How to use this API This API's endpoints are exact translations of the commands used by the chifra CLI application, and the query parameters mirror the commands' options and flags. If you want details, [the commands have their own documentation page](/chifra/introduction/). For detailed descriptions of fields, see [the data model reference](/data-model/intro/).    ### Before you begin  1. [Install the trueblocks-core application](/docs/install/install-core/)   on your machine, change your configs as needed. 2. Run `chifra daemon`     ### Example queries   By default, all calls are to `localhost:8080`.  All options and flags are passed through query parameters.   For example, to get block `100`, make a call to `/blocks` and specify  the block you want in the query parameter:   ```shell  curl \"http://localhost:8080/blocks?blocks=100\"  ```   Some parameters support ranges:   ```shell  curl \"http://localhost:8080/blocks?blocks=100-120\"  ```   Other parameters let you filter your responses. For example, to get only  the unique addresses from that block range:   ```shell  curl \"http://localhost:8080/blocks?blocks=100-110&uniq=true\"  ```   You might want to cache queries on your local machine.   ```shell  \"http://localhost:8080/blocks?blocks=100-110&cache=true\"  ```   Cacheing speeds up repeat queries significantly. The cache options are  particularly useful for calls to data-rich endpoints, like most endpoints  in the  \"Accounts\" collection.   Of course, caches occupy local storage. So cache wisely.   # noqa: E501

    The version of the OpenAPI document: 1.0.0-release
    Contact: info@trueblocks.io
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class LogFilter(
    schemas.AnyTypeSchema,
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    used by the fast path log queries for various commands
    """


    class MetaOapg:
        
        class properties:
            
            
            class fromBlock(
                schemas.AnyTypeSchema,
            ):
            
            
                class MetaOapg:
                    format = 'blknum'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'fromBlock':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class toBlock(
                schemas.AnyTypeSchema,
            ):
            
            
                class MetaOapg:
                    format = 'blknum'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'toBlock':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class blockHash(
                schemas.AnyTypeSchema,
            ):
            
            
                class MetaOapg:
                    format = 'hash'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'blockHash':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            emitters = schemas.AnyTypeSchema
            topics = schemas.AnyTypeSchema
            __annotations__ = {
                "fromBlock": fromBlock,
                "toBlock": toBlock,
                "blockHash": blockHash,
                "emitters": emitters,
                "topics": topics,
            }

    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fromBlock"]) -> MetaOapg.properties.fromBlock: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["toBlock"]) -> MetaOapg.properties.toBlock: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["blockHash"]) -> MetaOapg.properties.blockHash: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["emitters"]) -> MetaOapg.properties.emitters: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["topics"]) -> MetaOapg.properties.topics: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["fromBlock", "toBlock", "blockHash", "emitters", "topics", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fromBlock"]) -> typing.Union[MetaOapg.properties.fromBlock, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["toBlock"]) -> typing.Union[MetaOapg.properties.toBlock, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["blockHash"]) -> typing.Union[MetaOapg.properties.blockHash, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["emitters"]) -> typing.Union[MetaOapg.properties.emitters, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["topics"]) -> typing.Union[MetaOapg.properties.topics, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["fromBlock", "toBlock", "blockHash", "emitters", "topics", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        fromBlock: typing.Union[MetaOapg.properties.fromBlock, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        toBlock: typing.Union[MetaOapg.properties.toBlock, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        blockHash: typing.Union[MetaOapg.properties.blockHash, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        emitters: typing.Union[MetaOapg.properties.emitters, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        topics: typing.Union[MetaOapg.properties.topics, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'LogFilter':
        return super().__new__(
            cls,
            *_args,
            fromBlock=fromBlock,
            toBlock=toBlock,
            blockHash=blockHash,
            emitters=emitters,
            topics=topics,
            _configuration=_configuration,
            **kwargs,
        )
