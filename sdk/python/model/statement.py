# coding: utf-8

"""
    TrueBlocks API

     A REST layer over the TrueBlocks application. With `chifra daemon`, you can run this on your own machine, and make calls to `localhost`. ## How to use this API This API's endpoints are exact translations of the commands used by the chifra CLI application, and the query parameters mirror the commands' options and flags. If you want details, [the commands have their own documentation page](/chifra/introduction/). For detailed descriptions of fields, see [the data model reference](/data-model/intro/).    ### Before you begin  1. [Install the trueblocks-core application](/docs/install/install-core/)   on your machine, change your configs as needed. 2. Run `chifra daemon`     ### Example queries   By default, all calls are to `localhost:8080`.  All options and flags are passed through query parameters.   For example, to get block `100`, make a call to `/blocks` and specify  the block you want in the query parameter:   ```shell  curl \"http://localhost:8080/blocks?blocks=100\"  ```   Some parameters support ranges:   ```shell  curl \"http://localhost:8080/blocks?blocks=100-120\"  ```   Other parameters let you filter your responses. For example, to get only  the unique addresses from that block range:   ```shell  curl \"http://localhost:8080/blocks?blocks=100-110&uniq=true\"  ```   You might want to cache queries on your local machine.   ```shell  \"http://localhost:8080/blocks?blocks=100-110&cache=true\"  ```   Cacheing speeds up repeat queries significantly. The cache options are  particularly useful for calls to data-rich endpoints, like most endpoints  in the  \"Accounts\" collection.   Of course, caches occupy local storage. So cache wisely.   # noqa: E501

    The version of the OpenAPI document: 1.0.0-release
    Contact: info@trueblocks.io
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class Statement(
    schemas.AnyTypeSchema,
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    a statement, including all inflows and outflows, for a single transfer of an asset (including ETH) to or from a given address
    """


    class MetaOapg:
        
        class properties:
            
            
            class blockNumber(
                schemas.AnyTypeSchema,
            ):
            
            
                class MetaOapg:
                    format = 'blknum'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'blockNumber':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class transactionIndex(
                schemas.AnyTypeSchema,
            ):
            
            
                class MetaOapg:
                    format = 'blknum'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'transactionIndex':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class logIndex(
                schemas.AnyTypeSchema,
            ):
            
            
                class MetaOapg:
                    format = 'blknum'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'logIndex':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class transactionHash(
                schemas.AnyTypeSchema,
            ):
            
            
                class MetaOapg:
                    format = 'hash'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'transactionHash':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class timestamp(
                schemas.AnyTypeSchema,
            ):
            
            
                class MetaOapg:
                    format = 'timestamp'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'timestamp':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class date(
                schemas.AnyTypeSchema,
            ):
            
            
                class MetaOapg:
                    format = 'datetime'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'date':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class assetAddr(
                schemas.AnyTypeSchema,
            ):
            
            
                class MetaOapg:
                    format = 'address'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'assetAddr':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            assetSymbol = schemas.AnyTypeSchema
            
            
            class decimals(
                schemas.AnyTypeSchema,
            ):
            
            
                class MetaOapg:
                    format = 'uint64'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'decimals':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class spotPrice(
                schemas.Float64Base,
                schemas.AnyTypeSchema,
            ):
            
            
                class MetaOapg:
                    format = 'double'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'spotPrice':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            priceSource = schemas.AnyTypeSchema
            
            
            class accountedFor(
                schemas.AnyTypeSchema,
            ):
            
            
                class MetaOapg:
                    format = 'address'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'accountedFor':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class sender(
                schemas.AnyTypeSchema,
            ):
            
            
                class MetaOapg:
                    format = 'address'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'sender':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class recipient(
                schemas.AnyTypeSchema,
            ):
            
            
                class MetaOapg:
                    format = 'address'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'recipient':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class begBal(
                schemas.AnyTypeSchema,
            ):
            
            
                class MetaOapg:
                    format = 'int256'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'begBal':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class amountNet(
                schemas.AnyTypeSchema,
            ):
            
            
                class MetaOapg:
                    format = 'int256'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'amountNet':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class endBal(
                schemas.AnyTypeSchema,
            ):
            
            
                class MetaOapg:
                    format = 'int256'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'endBal':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            reconciliationType = schemas.AnyTypeSchema
            reconciled = schemas.AnyTypeSchema
            
            
            class totalIn(
                schemas.AnyTypeSchema,
            ):
            
            
                class MetaOapg:
                    format = 'int256'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'totalIn':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class amountIn(
                schemas.AnyTypeSchema,
            ):
            
            
                class MetaOapg:
                    format = 'int256'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'amountIn':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class internalIn(
                schemas.AnyTypeSchema,
            ):
            
            
                class MetaOapg:
                    format = 'int256'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'internalIn':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class selfDestructIn(
                schemas.AnyTypeSchema,
            ):
            
            
                class MetaOapg:
                    format = 'int256'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'selfDestructIn':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class minerBaseRewardIn(
                schemas.AnyTypeSchema,
            ):
            
            
                class MetaOapg:
                    format = 'int256'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'minerBaseRewardIn':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class minerNephewRewardIn(
                schemas.AnyTypeSchema,
            ):
            
            
                class MetaOapg:
                    format = 'int256'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'minerNephewRewardIn':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class minerTxFeeIn(
                schemas.AnyTypeSchema,
            ):
            
            
                class MetaOapg:
                    format = 'int256'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'minerTxFeeIn':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class minerUncleRewardIn(
                schemas.AnyTypeSchema,
            ):
            
            
                class MetaOapg:
                    format = 'int256'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'minerUncleRewardIn':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class correctingIn(
                schemas.AnyTypeSchema,
            ):
            
            
                class MetaOapg:
                    format = 'int256'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'correctingIn':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class prefundIn(
                schemas.AnyTypeSchema,
            ):
            
            
                class MetaOapg:
                    format = 'int256'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'prefundIn':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class totalOut(
                schemas.AnyTypeSchema,
            ):
            
            
                class MetaOapg:
                    format = 'int256'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'totalOut':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class amountOut(
                schemas.AnyTypeSchema,
            ):
            
            
                class MetaOapg:
                    format = 'int256'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'amountOut':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class internalOut(
                schemas.AnyTypeSchema,
            ):
            
            
                class MetaOapg:
                    format = 'int256'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'internalOut':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class correctingOut(
                schemas.AnyTypeSchema,
            ):
            
            
                class MetaOapg:
                    format = 'int256'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'correctingOut':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class selfDestructOut(
                schemas.AnyTypeSchema,
            ):
            
            
                class MetaOapg:
                    format = 'int256'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'selfDestructOut':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class gasOut(
                schemas.AnyTypeSchema,
            ):
            
            
                class MetaOapg:
                    format = 'int256'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'gasOut':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class totalOutLessGas(
                schemas.AnyTypeSchema,
            ):
            
            
                class MetaOapg:
                    format = 'int256'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'totalOutLessGas':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class prevAppBlk(
                schemas.AnyTypeSchema,
            ):
            
            
                class MetaOapg:
                    format = 'blknum'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'prevAppBlk':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class prevBal(
                schemas.AnyTypeSchema,
            ):
            
            
                class MetaOapg:
                    format = 'int256'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'prevBal':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class begBalDiff(
                schemas.AnyTypeSchema,
            ):
            
            
                class MetaOapg:
                    format = 'int256'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'begBalDiff':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class endBalDiff(
                schemas.AnyTypeSchema,
            ):
            
            
                class MetaOapg:
                    format = 'int256'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'endBalDiff':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class endBalCalc(
                schemas.AnyTypeSchema,
            ):
            
            
                class MetaOapg:
                    format = 'int256'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'endBalCalc':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            correctingReason = schemas.AnyTypeSchema
            __annotations__ = {
                "blockNumber": blockNumber,
                "transactionIndex": transactionIndex,
                "logIndex": logIndex,
                "transactionHash": transactionHash,
                "timestamp": timestamp,
                "date": date,
                "assetAddr": assetAddr,
                "assetSymbol": assetSymbol,
                "decimals": decimals,
                "spotPrice": spotPrice,
                "priceSource": priceSource,
                "accountedFor": accountedFor,
                "sender": sender,
                "recipient": recipient,
                "begBal": begBal,
                "amountNet": amountNet,
                "endBal": endBal,
                "reconciliationType": reconciliationType,
                "reconciled": reconciled,
                "totalIn": totalIn,
                "amountIn": amountIn,
                "internalIn": internalIn,
                "selfDestructIn": selfDestructIn,
                "minerBaseRewardIn": minerBaseRewardIn,
                "minerNephewRewardIn": minerNephewRewardIn,
                "minerTxFeeIn": minerTxFeeIn,
                "minerUncleRewardIn": minerUncleRewardIn,
                "correctingIn": correctingIn,
                "prefundIn": prefundIn,
                "totalOut": totalOut,
                "amountOut": amountOut,
                "internalOut": internalOut,
                "correctingOut": correctingOut,
                "selfDestructOut": selfDestructOut,
                "gasOut": gasOut,
                "totalOutLessGas": totalOutLessGas,
                "prevAppBlk": prevAppBlk,
                "prevBal": prevBal,
                "begBalDiff": begBalDiff,
                "endBalDiff": endBalDiff,
                "endBalCalc": endBalCalc,
                "correctingReason": correctingReason,
            }

    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["blockNumber"]) -> MetaOapg.properties.blockNumber: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["transactionIndex"]) -> MetaOapg.properties.transactionIndex: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["logIndex"]) -> MetaOapg.properties.logIndex: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["transactionHash"]) -> MetaOapg.properties.transactionHash: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["timestamp"]) -> MetaOapg.properties.timestamp: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["date"]) -> MetaOapg.properties.date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["assetAddr"]) -> MetaOapg.properties.assetAddr: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["assetSymbol"]) -> MetaOapg.properties.assetSymbol: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["decimals"]) -> MetaOapg.properties.decimals: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["spotPrice"]) -> MetaOapg.properties.spotPrice: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["priceSource"]) -> MetaOapg.properties.priceSource: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["accountedFor"]) -> MetaOapg.properties.accountedFor: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sender"]) -> MetaOapg.properties.sender: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["recipient"]) -> MetaOapg.properties.recipient: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["begBal"]) -> MetaOapg.properties.begBal: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["amountNet"]) -> MetaOapg.properties.amountNet: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["endBal"]) -> MetaOapg.properties.endBal: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["reconciliationType"]) -> MetaOapg.properties.reconciliationType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["reconciled"]) -> MetaOapg.properties.reconciled: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["totalIn"]) -> MetaOapg.properties.totalIn: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["amountIn"]) -> MetaOapg.properties.amountIn: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["internalIn"]) -> MetaOapg.properties.internalIn: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["selfDestructIn"]) -> MetaOapg.properties.selfDestructIn: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["minerBaseRewardIn"]) -> MetaOapg.properties.minerBaseRewardIn: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["minerNephewRewardIn"]) -> MetaOapg.properties.minerNephewRewardIn: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["minerTxFeeIn"]) -> MetaOapg.properties.minerTxFeeIn: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["minerUncleRewardIn"]) -> MetaOapg.properties.minerUncleRewardIn: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["correctingIn"]) -> MetaOapg.properties.correctingIn: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["prefundIn"]) -> MetaOapg.properties.prefundIn: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["totalOut"]) -> MetaOapg.properties.totalOut: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["amountOut"]) -> MetaOapg.properties.amountOut: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["internalOut"]) -> MetaOapg.properties.internalOut: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["correctingOut"]) -> MetaOapg.properties.correctingOut: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["selfDestructOut"]) -> MetaOapg.properties.selfDestructOut: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["gasOut"]) -> MetaOapg.properties.gasOut: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["totalOutLessGas"]) -> MetaOapg.properties.totalOutLessGas: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["prevAppBlk"]) -> MetaOapg.properties.prevAppBlk: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["prevBal"]) -> MetaOapg.properties.prevBal: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["begBalDiff"]) -> MetaOapg.properties.begBalDiff: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["endBalDiff"]) -> MetaOapg.properties.endBalDiff: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["endBalCalc"]) -> MetaOapg.properties.endBalCalc: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["correctingReason"]) -> MetaOapg.properties.correctingReason: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["blockNumber", "transactionIndex", "logIndex", "transactionHash", "timestamp", "date", "assetAddr", "assetSymbol", "decimals", "spotPrice", "priceSource", "accountedFor", "sender", "recipient", "begBal", "amountNet", "endBal", "reconciliationType", "reconciled", "totalIn", "amountIn", "internalIn", "selfDestructIn", "minerBaseRewardIn", "minerNephewRewardIn", "minerTxFeeIn", "minerUncleRewardIn", "correctingIn", "prefundIn", "totalOut", "amountOut", "internalOut", "correctingOut", "selfDestructOut", "gasOut", "totalOutLessGas", "prevAppBlk", "prevBal", "begBalDiff", "endBalDiff", "endBalCalc", "correctingReason", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["blockNumber"]) -> typing.Union[MetaOapg.properties.blockNumber, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["transactionIndex"]) -> typing.Union[MetaOapg.properties.transactionIndex, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["logIndex"]) -> typing.Union[MetaOapg.properties.logIndex, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["transactionHash"]) -> typing.Union[MetaOapg.properties.transactionHash, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["timestamp"]) -> typing.Union[MetaOapg.properties.timestamp, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["date"]) -> typing.Union[MetaOapg.properties.date, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["assetAddr"]) -> typing.Union[MetaOapg.properties.assetAddr, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["assetSymbol"]) -> typing.Union[MetaOapg.properties.assetSymbol, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["decimals"]) -> typing.Union[MetaOapg.properties.decimals, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["spotPrice"]) -> typing.Union[MetaOapg.properties.spotPrice, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["priceSource"]) -> typing.Union[MetaOapg.properties.priceSource, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["accountedFor"]) -> typing.Union[MetaOapg.properties.accountedFor, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sender"]) -> typing.Union[MetaOapg.properties.sender, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["recipient"]) -> typing.Union[MetaOapg.properties.recipient, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["begBal"]) -> typing.Union[MetaOapg.properties.begBal, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["amountNet"]) -> typing.Union[MetaOapg.properties.amountNet, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["endBal"]) -> typing.Union[MetaOapg.properties.endBal, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["reconciliationType"]) -> typing.Union[MetaOapg.properties.reconciliationType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["reconciled"]) -> typing.Union[MetaOapg.properties.reconciled, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["totalIn"]) -> typing.Union[MetaOapg.properties.totalIn, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["amountIn"]) -> typing.Union[MetaOapg.properties.amountIn, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["internalIn"]) -> typing.Union[MetaOapg.properties.internalIn, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["selfDestructIn"]) -> typing.Union[MetaOapg.properties.selfDestructIn, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["minerBaseRewardIn"]) -> typing.Union[MetaOapg.properties.minerBaseRewardIn, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["minerNephewRewardIn"]) -> typing.Union[MetaOapg.properties.minerNephewRewardIn, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["minerTxFeeIn"]) -> typing.Union[MetaOapg.properties.minerTxFeeIn, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["minerUncleRewardIn"]) -> typing.Union[MetaOapg.properties.minerUncleRewardIn, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["correctingIn"]) -> typing.Union[MetaOapg.properties.correctingIn, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["prefundIn"]) -> typing.Union[MetaOapg.properties.prefundIn, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["totalOut"]) -> typing.Union[MetaOapg.properties.totalOut, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["amountOut"]) -> typing.Union[MetaOapg.properties.amountOut, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["internalOut"]) -> typing.Union[MetaOapg.properties.internalOut, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["correctingOut"]) -> typing.Union[MetaOapg.properties.correctingOut, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["selfDestructOut"]) -> typing.Union[MetaOapg.properties.selfDestructOut, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["gasOut"]) -> typing.Union[MetaOapg.properties.gasOut, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["totalOutLessGas"]) -> typing.Union[MetaOapg.properties.totalOutLessGas, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["prevAppBlk"]) -> typing.Union[MetaOapg.properties.prevAppBlk, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["prevBal"]) -> typing.Union[MetaOapg.properties.prevBal, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["begBalDiff"]) -> typing.Union[MetaOapg.properties.begBalDiff, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["endBalDiff"]) -> typing.Union[MetaOapg.properties.endBalDiff, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["endBalCalc"]) -> typing.Union[MetaOapg.properties.endBalCalc, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["correctingReason"]) -> typing.Union[MetaOapg.properties.correctingReason, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["blockNumber", "transactionIndex", "logIndex", "transactionHash", "timestamp", "date", "assetAddr", "assetSymbol", "decimals", "spotPrice", "priceSource", "accountedFor", "sender", "recipient", "begBal", "amountNet", "endBal", "reconciliationType", "reconciled", "totalIn", "amountIn", "internalIn", "selfDestructIn", "minerBaseRewardIn", "minerNephewRewardIn", "minerTxFeeIn", "minerUncleRewardIn", "correctingIn", "prefundIn", "totalOut", "amountOut", "internalOut", "correctingOut", "selfDestructOut", "gasOut", "totalOutLessGas", "prevAppBlk", "prevBal", "begBalDiff", "endBalDiff", "endBalCalc", "correctingReason", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        blockNumber: typing.Union[MetaOapg.properties.blockNumber, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        transactionIndex: typing.Union[MetaOapg.properties.transactionIndex, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        logIndex: typing.Union[MetaOapg.properties.logIndex, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        transactionHash: typing.Union[MetaOapg.properties.transactionHash, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        timestamp: typing.Union[MetaOapg.properties.timestamp, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        date: typing.Union[MetaOapg.properties.date, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        assetAddr: typing.Union[MetaOapg.properties.assetAddr, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        assetSymbol: typing.Union[MetaOapg.properties.assetSymbol, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        decimals: typing.Union[MetaOapg.properties.decimals, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        spotPrice: typing.Union[MetaOapg.properties.spotPrice, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        priceSource: typing.Union[MetaOapg.properties.priceSource, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        accountedFor: typing.Union[MetaOapg.properties.accountedFor, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        sender: typing.Union[MetaOapg.properties.sender, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        recipient: typing.Union[MetaOapg.properties.recipient, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        begBal: typing.Union[MetaOapg.properties.begBal, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        amountNet: typing.Union[MetaOapg.properties.amountNet, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        endBal: typing.Union[MetaOapg.properties.endBal, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        reconciliationType: typing.Union[MetaOapg.properties.reconciliationType, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        reconciled: typing.Union[MetaOapg.properties.reconciled, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        totalIn: typing.Union[MetaOapg.properties.totalIn, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        amountIn: typing.Union[MetaOapg.properties.amountIn, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        internalIn: typing.Union[MetaOapg.properties.internalIn, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        selfDestructIn: typing.Union[MetaOapg.properties.selfDestructIn, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        minerBaseRewardIn: typing.Union[MetaOapg.properties.minerBaseRewardIn, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        minerNephewRewardIn: typing.Union[MetaOapg.properties.minerNephewRewardIn, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        minerTxFeeIn: typing.Union[MetaOapg.properties.minerTxFeeIn, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        minerUncleRewardIn: typing.Union[MetaOapg.properties.minerUncleRewardIn, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        correctingIn: typing.Union[MetaOapg.properties.correctingIn, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        prefundIn: typing.Union[MetaOapg.properties.prefundIn, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        totalOut: typing.Union[MetaOapg.properties.totalOut, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        amountOut: typing.Union[MetaOapg.properties.amountOut, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        internalOut: typing.Union[MetaOapg.properties.internalOut, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        correctingOut: typing.Union[MetaOapg.properties.correctingOut, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        selfDestructOut: typing.Union[MetaOapg.properties.selfDestructOut, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        gasOut: typing.Union[MetaOapg.properties.gasOut, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        totalOutLessGas: typing.Union[MetaOapg.properties.totalOutLessGas, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        prevAppBlk: typing.Union[MetaOapg.properties.prevAppBlk, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        prevBal: typing.Union[MetaOapg.properties.prevBal, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        begBalDiff: typing.Union[MetaOapg.properties.begBalDiff, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        endBalDiff: typing.Union[MetaOapg.properties.endBalDiff, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        endBalCalc: typing.Union[MetaOapg.properties.endBalCalc, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        correctingReason: typing.Union[MetaOapg.properties.correctingReason, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Statement':
        return super().__new__(
            cls,
            *_args,
            blockNumber=blockNumber,
            transactionIndex=transactionIndex,
            logIndex=logIndex,
            transactionHash=transactionHash,
            timestamp=timestamp,
            date=date,
            assetAddr=assetAddr,
            assetSymbol=assetSymbol,
            decimals=decimals,
            spotPrice=spotPrice,
            priceSource=priceSource,
            accountedFor=accountedFor,
            sender=sender,
            recipient=recipient,
            begBal=begBal,
            amountNet=amountNet,
            endBal=endBal,
            reconciliationType=reconciliationType,
            reconciled=reconciled,
            totalIn=totalIn,
            amountIn=amountIn,
            internalIn=internalIn,
            selfDestructIn=selfDestructIn,
            minerBaseRewardIn=minerBaseRewardIn,
            minerNephewRewardIn=minerNephewRewardIn,
            minerTxFeeIn=minerTxFeeIn,
            minerUncleRewardIn=minerUncleRewardIn,
            correctingIn=correctingIn,
            prefundIn=prefundIn,
            totalOut=totalOut,
            amountOut=amountOut,
            internalOut=internalOut,
            correctingOut=correctingOut,
            selfDestructOut=selfDestructOut,
            gasOut=gasOut,
            totalOutLessGas=totalOutLessGas,
            prevAppBlk=prevAppBlk,
            prevBal=prevBal,
            begBalDiff=begBalDiff,
            endBalDiff=endBalDiff,
            endBalCalc=endBalCalc,
            correctingReason=correctingReason,
            _configuration=_configuration,
            **kwargs,
        )
