// Copyright 2021 The TrueBlocks Authors. All rights reserved.
// Use of this source code is governed by a license that can
// be found in the LICENSE file.
/*
 * Parts of this file were generated with makeClass --run. Edit only those parts of
 * the code inside of 'EXISTING_CODE' tags.
 */

package types

// EXISTING_CODE
import "fmt"

// EXISTING_CODE

type RawParameter struct {
	Disp          string `json:"disp"`
	Is_omitempty  string `json:"is_omitempty"`
	Is_nowrite    string `json:"is_nowrite"`
	Value         string `json:"value"`
	Is_noaddfld   string `json:"is_noaddfld"`
	Is_minimal    string `json:"is_minimal"`
	Is_builtin    string `json:"is_builtin"`
	Unused        string `json:"unused"`
	Is_flags      string `json:"is_flags"`
	Precision     string `json:"precision"`
	MaxWidth      string `json:"maxWidth"`
	Doc           string `json:"doc"`
	Is_extra      string `json:"is_extra"`
	Example       string `json:"example"`
	Description   string `json:"description"`
	Is_pointer    string `json:"is_pointer"`
	Is_array      string `json:"is_array"`
	Is_object     string `json:"is_object"`
	ParameterType string `json:"type"`
	Name          string `json:"name"`
	StrDefault    string `json:"strDefault"`
	Indexed       string `json:"indexed"`
	InternalType  string `json:"internalType"`
	Components    string `json:"components"`
}

type SimpleParameter struct {
	Disp         uint64 `json:"disp,omitempty"`
	Is_omitempty bool   `json:"is_omitempty,omitempty"`
	Is_nowrite   bool   `json:"is_nowrite,omitempty"`
	// TODO(merge): This type has to be autogenerated as any, not string
	Value         any               `json:"value,omitempty"`
	Is_noaddfld   bool              `json:"is_noaddfld,omitempty"`
	Is_minimal    bool              `json:"is_minimal,omitempty"`
	Is_builtin    bool              `json:"is_builtin,omitempty"`
	Unused        bool              `json:"unused,omitempty"`
	Is_flags      uint64            `json:"is_flags,omitempty"`
	Precision     uint64            `json:"precision,omitempty"`
	MaxWidth      uint64            `json:"maxWidth,omitempty"`
	Doc           uint64            `json:"doc,omitempty"`
	Is_extra      bool              `json:"is_extra,omitempty"`
	Example       string            `json:"example,omitempty"`
	Description   string            `json:"description,omitempty"`
	Is_pointer    bool              `json:"is_pointer,omitempty"`
	Is_array      bool              `json:"is_array,omitempty"`
	Is_object     bool              `json:"is_object,omitempty"`
	ParameterType string            `json:"type"`
	Name          string            `json:"name"`
	StrDefault    string            `json:"strDefault,omitempty"`
	Indexed       bool              `json:"indexed,omitempty"`
	InternalType  string            `json:"internalType,omitempty"`
	Components    []SimpleParameter `json:"components,omitempty"`
	raw           *RawParameter
}

func (s *SimpleParameter) Raw() *RawParameter {
	return s.raw
}

func (s *SimpleParameter) SetRaw(raw *RawParameter) {
	s.raw = raw
}

func (s *SimpleParameter) Model(showHidden bool, format string, extraOptions map[string]any) Model {
	// EXISTING_CODE
	// EXISTING_CODE

	model := map[string]interface{}{
		"type": s.ParameterType,
		"name": s.Name,
	}

	order := []string{
		"type",
		"name",
	}

	// EXISTING_CODE
	if format == "json" {
		if s.Indexed {
			model["indexed"] = s.Indexed
			order = append(order, "indexed")
		}
		if s.ParameterType != s.InternalType {
			model["internalType"] = s.InternalType
			order = append(order, "internalType")
		}
	}
	// EXISTING_CODE

	return Model{
		Data:  model,
		Order: order,
	}
}

// EXISTING_CODE
// DisplayName returns parameter name if defined, or a default name "val_" + index
func (s *SimpleParameter) DisplayName(index int) string {
	if s.Name != "" {
		return s.Name
	}
	return "val_" + fmt.Sprint(index)
}

func ParametersToMap(params []SimpleParameter) (result map[string]any) {
	// This produces `null` in JSON instead of an empty object (`{}`)
	if len(params) == 0 {
		return nil
	}
	result = make(map[string]any)
	for index, param := range params {
		if param.Value == "0x" || param.Value == "0x0" {
			continue
		}
		result[param.DisplayName(index)] = param.Value
	}
	return
}

// EXISTING_CODE
