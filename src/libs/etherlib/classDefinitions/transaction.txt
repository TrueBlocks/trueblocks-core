[settings]
class = CTransaction
fields = \
    hash hash|\
    hash blockHash|\
    blknum blockNumber|\
    blknum transactionIndex|\
    uint64 nonce|\
    timestamp timestamp|\
    address from|\
    address to|\
    wei value|\
    wei extraValue1|\
    wei extraValue2|\
    gas gas|\
    gas gasPrice|\
    gas maxFeePerGas|\
    gas maxPriorityFeePerGas|\
    string input|\
    uint8 isError|\
    uint8 hasToken|\
    uint8 cachebits=CB_NONE|\
    uint8 reserved2|\
    CReceipt receipt|\
    CTraceArray traces|\
    CFunction articulatedTx|\
    string compressedTx (nowrite)|\
    CReconciliationArray statements (nowrite)|\
    bool finalized (nowrite,omitempty)|\
    date date (extra)|\
    string fromName (extra)|\
    string toName (extra)|\
    string extraData (extra)
includes = utillib.h|abi.h|receipt.h|trace.h|reconciliation.h|ethstate.h
cpp_includes = etherlib.h
scope = extern
serializable = true
display_str = blockNumber, transactionIndex, date, timestamp, from, to, ether, etherGasPrice, gasUsed, hash, isError, encoding, compressedTx
equals = (hash == it.hash)
tsx = true

#   transaction:
#      type: object
#      properties:
#        hash:
#          type: string
#          format: hash_t
#          description: "The hash of the transaction"
#          example: "0xf12869a900c2fd345f9d6a93e25e6118fd7f99f2b04bff6da59c8bc4218a1e98"
#        blockHash:
#          type: string
#          format: hash_t
#          description: "The hash of the block containing this transaction"
#          example: "0xc4218a1e98f12869a900c2fd345f9d6abff6da59c8b93e25e6118fd7f99fb04"
#        blockNumber:
#          type: number
#          format: blknum_t
#          example: 10021
#          description: the number of the block
#        transactionIndex:
#          type: number
#          format: txnum_t
#          example: 305
#          description: "the zero-indexed position of the transaction in the block"
#        nonce:
#          type: number
#          example: 232
#          description: "sequence number of the transactions sent by the sender"
#        timestamp:
#          type: number
#          format: timestamp_t
#          example: 1438335038
#          description: "the unix timestamp of the object"
#        from:
#          description: "address from which the transaction was sent"
#          type: string
#          format: address_t
#        to:
#          description: "address to which the transaction was sent"
#          type: string
#          format: address_t
#        value:
#          type: number
#          format: wei_t
#          example: 0
#          description: the amount of wei sent with this transactions
#        gas:
#          type: number
#          format: wei_t
#          example: 158660
#          description: the maximum number of gas allowed for this transaction
#        gasPrice:
#          type: number
#          format: wei_t
#          description: "the number of wei per unit of gas the sender is willing to spend"
#          example: 63525836552
#        input:
#          type: string
#          format: hex
#          description: "byte data either containing a message or funcational data for a smart contracts. See the --articulate "
#          example: "0x3d18b912"
#        receipt:
#          $ref: "#/components/schemas/receipt"
#        statements:
#          type: array
#          description: "array of reconciliations"
#          items:
#            $ref: "#/components/schemas/reconciliation"
#        articulatedTx:
#          $ref: "#/components/schemas/function"
#        compressedTx:
#          type: string
#          example: "0x3d18b912 ( )"
#          description: "truncated, more readable version of the articulation"
#        hasToken:
#          type: boolean
#          example: 0
#          description: "`true` if the transaction is token related, `false` otherwise"
#        finalized:
#          type: boolean
#          example: true
#          description: "flag indicating the system considers this data final"
