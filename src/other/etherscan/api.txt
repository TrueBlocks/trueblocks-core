-----------------------------------------------------------------------------------------------------------------------------------------------------------------
Group-x:       Accounts
Description-y: Get Ether Balance for a Single Address Returns the Ether balance of a given address.
Endpoint-x:    https://api.etherscan.io/api?module=account&action=balance&address=0xde0b295669a9fd93d5f28d9ec85e40f4cb697bae&tag=latest&apikey=YourApiKeyToken
Result:        {"status":"1","message":"OK","result":"40891626854930000000000"}

-----------------------------------------------------------------------------------------------------------------------------------------------------------------
Group-x:       Accounts
Description-y: Get Ether Balance for Multiple Addresses in a Single Call Returns the balance of the accounts from a list of addresses.
Endpoint-x:    https://api.etherscan.io/api?module=account&action=balancemulti&address=0xddbd2b932c763ba5b1b7ae3b362eac3e8d40121a,0x63a9975ba31b0b9626b34300f7f627147df1f526,0x198ef1ec325a96cc354c7266a038be8b5c558f67&tag=latest&apikey=YourApiKeyToken
Result:        {"status":"1","message":"OK","result":[{"account":"0xddbd2b932c763ba5b1b7ae3b362eac3e8d40121a","balance":"40891626854930000000000"},{"account":"0x198ef1ec325a96cc354c7266a038be8b5c558f67","balance":"0"}]}

-----------------------------------------------------------------------------------------------------------------------------------------------------------------
Group-x:       Accounts
Description-y: Get a list of 'Normal' Transactions By Address Returns the list of transactions performed by an address, with optional pagination. Max 10000
Endpoint-x:    https://api.etherscan.io/api?module=account&action=txlist&address=0xc5102fE9359FD9a28f877a67E36B0F050d81a3CC&startblock=0&endblock=99999999&page=1&offset=10&sort=asc&apikey=YourApiKeyToken
Result:        {"status":"1","message":"OK","result":[{"blockNumber":"14923692","timeStamp":"1654646570","hash":"0xaa45b4858ba44230a5fce5a29570a5dec2bf1f0ba95bacdec4fe8f2c4fa99338","nonce":"7","blockHash":"0x8df71a12a8c06b36c06c26bf6248857dd2a2b75b6edbb4e33e9477078897b282","transactionIndex":"27","from":"0x9aa99c23f67c81701c772b106b4f83f6e858dd2e","to":"0xc5102fe9359fd9a28f877a67e36b0f050d81a3cc","value":"0","gas":"6000000","gasPrice":"125521409858","isError":"0","txreceipt_status":"1","input":"0xa9059cbb000000000000000000000000313143c4088a47c469d06fe3fa5fd4196be6a4d600000000000000000000000000000000000000000003b8e97d229a2d54800000","contractAddress":"","cumulativeGasUsed":"1977481","gasUsed":"57168","confirmations":"122471","methodId":"0xa9059cbb","functionName":"transfer(address _to, uint256 _value)"}]}

-----------------------------------------------------------------------------------------------------------------------------------------------------------------
Group-x:       Accounts
Description-y: Get a list of 'Internal' Transactions by Address Returns the list of internal transactions performed by an address, with optional pagination. Max 10000
Endpoint-x:    https://api.etherscan.io/api?module=account&action=txlistinternal&address=0x2c1ba59d6f58433fb1eaee7d20b26ed83bda51a3&startblock=0&endblock=2702578&page=1&offset=10&sort=asc&apikey=YourApiKeyToken
Result:        {"status":"1","message":"OK","result":[{"blockNumber":"2535479","timeStamp":"1477839134","hash":"0x1a50f1dc0bc912745f7d09b988669f71d199719e2fb7592c2074ede9578032d0","from":"0x2c1ba59d6f58433fb1eaee7d20b26ed83bda51a3","to":"0x20d42f2e99a421147acf198d775395cac2e8b03d","value":"100000000000000000","contractAddress":"","input":"","type":"call","gas":"235231","gasUsed":"0","traceId":"0","isError":"0","errCode":""}]}

-----------------------------------------------------------------------------------------------------------------------------------------------------------------
Group-x:       Accounts
Description-y: Get 'Internal Transactions' by Transaction Hash Returns the list of internal transactions performed within a transaction. Max 10000
Endpoint-x:    https://api.etherscan.io/api?module=account&action=txlistinternal&txhash=0x40eb908387324f2b575b4879cd9d7188f69c8fc9d87c901b9e2daaea4b442170&apikey=YourApiKeyToken
Result:        {"status":"1","message":"OK","result":[{"blockNumber":"1743059","timeStamp":"1466489498","from":"0x2cac6e4b11d6b58f6d3c1c9d5fe8faa89f60e5a2","to":"0x66a1c3eaf0f1ffc28d209c0763ed0ca614f3b002","value":"7106740000000000","contractAddress":"","input":"","type":"call","gas":"2300","gasUsed":"0","isError":"0","errCode":""}]}

-----------------------------------------------------------------------------------------------------------------------------------------------------------------
Group-x:       Accounts
Description-y: Get "Internal Transactions" by Block Range Returns the list of internal transactions performed within a block range, with optional pagination. Max 10000
Endpoint-x:    https://api.etherscan.io/api?module=account&action=txlistinternal&startblock=13481773&endblock=13491773&page=1&offset=10&sort=asc&apikey=YourApiKeyToken
Result:        {"status":"1","message":"OK","result":[{"blockNumber":"50107","timeStamp":"1438984016","hash":"0x3f97c969ddf71f515ce5373b1f8e76e9fd7016611d8ce455881009414301789e","from":"0x109c4f2ccc82c4d77bde15f306707320294aea3f","to":"0x881b0a4e9c55d08e31d8d3c022144d75a454211c","value":"1000000000000000000","contractAddress":"","input":"","type":"call","gas":"2300","gasUsed":"0","traceId":"0","isError":"1","errCode":""},{"blockNumber":"50111","timeStamp":"1438984075","hash":"0x893c428fed019404f704cf4d9be977ed9ca01050ed93dccdd6c169422155586f","from":"0x109c4f2ccc82c4d77bde15f306707320294aea3f","to":"0x881b0a4e9c55d08e31d8d3c022144d75a454211c","value":"1000000000000000000","contractAddress":"","input":"","type":"call","gas":"2300","gasUsed":"0","traceId":"0","isError":"0","errCode":""}]}

-----------------------------------------------------------------------------------------------------------------------------------------------------------------
Group-x:       Accounts
Description-y: Get a list of 'ERC20 - Token Transfer Events' by Address Returns the list of ERC-20 tokens transferred by an address, with optional filtering by token contract.
Endpoint-x:    https://api.etherscan.io/api?module=account&action=tokentx&contractaddress=0x9f8f72aa9304c8b593d555f12ef6589cc3a579a2&address=0x4e83362442b8d1bec281594cea3050c8eb01311c&page=1&offset=100&startblock=0&endblock=27025780&sort=asc&apikey=YourApiKeyToken
Result:        {"status":"1","message":"OK","result":[{"blockNumber":"4730207","timeStamp":"1513240363","hash":"0xe8c208398bd5ae8e4c237658580db56a2a94dfa0ca382c99b776fa6e7d31d5b4","nonce":"406","blockHash":"0x022c5e6a3d2487a8ccf8946a2ffb74938bf8e5c8a3f6d91b41c56378a96b5c37","from":"0x642ae78fafbb8032da552d619ad43f1d81e4dd7c","contractAddress":"0x9f8f72aa9304c8b593d555f12ef6589cc3a579a2","to":"0x4e83362442b8d1bec281594cea3050c8eb01311c","value":"5901522149285533025181","tokenName":"Maker","tokenSymbol":"MKR","tokenDecimal":"18","transactionIndex":"81","gas":"940000","gasPrice":"32010000000","gasUsed":"77759","cumulativeGasUsed":"2523379","input":"deprecated","confirmations":"7968350"},{"blockNumber":"4764973","timeStamp":"1513764636","hash":"0x9c82e89b7f6a4405d11c361adb6d808d27bcd9db3b04b3fb3bc05d182bbc5d6f","nonce":"428","blockHash":"0x87a4d04a6d8fce7a149e9dc528b88dc0c781a87456910c42984bdc15930a2cac","from":"0x4e83362442b8d1bec281594cea3050c8eb01311c","contractAddress":"0x9f8f72aa9304c8b593d555f12ef6589cc3a579a2","to":"0x69076e44a9c70a67d5b79d95795aba299083c275","value":"132520488141080","tokenName":"Maker","tokenSymbol":"MKR","tokenDecimal":"18","transactionIndex":"167","gas":"940000","gasPrice":"35828000000","gasUsed":"127593","cumulativeGasUsed":"6315818","input":"deprecated","confirmations":"7933584"}]}

-----------------------------------------------------------------------------------------------------------------------------------------------------------------
Group-x:       Accounts
Description-y: Get a list of 'ERC721 - Token Transfer Events' by Address Returns the list of ERC-721 ( NFT ) tokens transferred by an address, with optional filtering by token contract.
Endpoint-x:    https://api.etherscan.io/api?module=account&action=tokennfttx&contractaddress=0x06012c8cf97bead5deae237070f9587f8e7a266d&address=0x6975be450864c02b4613023c2152ee0743572325&page=1&offset=100&startblock=0&endblock=27025780&sort=asc&apikey=YourApiKeyToken
Result:        {"status":"1","message":"OK","result":[{"blockNumber":"4708120","timeStamp":"1512907118","hash":"0x031e6968a8de362e4328d60dcc7f72f0d6fc84284c452f63176632177146de66","nonce":"0","blockHash":"0x4be19c278bfaead5cb0bc9476fa632e2447f6e6259e0303af210302d22779a24","from":"0xb1690c08e213a35ed9bab7b318de14420fb57d8c","contractAddress":"0x06012c8cf97bead5deae237070f9587f8e7a266d","to":"0x6975be450864c02b4613023c2152ee0743572325","tokenID":"202106","tokenName":"CryptoKitties","tokenSymbol":"CK","tokenDecimal":"0","transactionIndex":"81","gas":"158820","gasPrice":"40000000000","gasUsed":"60508","cumulativeGasUsed":"4880352","input":"deprecated","confirmations":"7990490"},{"blockNumber":"4708161","timeStamp":"1512907756","hash":"0x9626e7064b68b5463cf677e10815a0b394645a0bfa245f26a2de6074324e83ff","nonce":"1","blockHash":"0xe1c6cbc39a723496f4cbc3e70241012854f2e88b4d2d5f339d8f0a4a1cc406d8","from":"0xb1690c08e213a35ed9bab7b318de14420fb57d8c","contractAddress":"0x06012c8cf97bead5deae237070f9587f8e7a266d","to":"0x6975be450864c02b4613023c2152ee0743572325","tokenID":"147739","tokenName":"CryptoKitties","tokenSymbol":"CK","tokenDecimal":"0","transactionIndex":"41","gas":"135963","gasPrice":"40000000000","gasUsed":"45508","cumulativeGasUsed":"3359342","input":"deprecated","confirmations":"7990449"}]}

-----------------------------------------------------------------------------------------------------------------------------------------------------------------
Group-x:       Accounts
Description-y: Get a list of 'ERC1155 - Token Transfer Events' by Address Returns the list of ERC-1155 ( Multi Token Standard ) tokens transferred by an address, with optional filtering by token contract.
Endpoint-x:    https://api.etherscan.io/api?module=account&action=token1155tx&contractaddress=0x76be3b62873462d2142405439777e971754e8e77&address=0x83f564d180b58ad9a02a449105568189ee7de8cb&page=1&offset=100&startblock=0&endblock=99999999&sort=asc&apikey=YourApiKeyToken
Result:        {"status":"1","message":"OK","result":[{"blockNumber":"13472395","timeStamp":"1634973285","hash":"0x643b15f3ffaad5d38e33e5872b4ebaa7a643eda8b50ffd5331f682934ee65d4d","nonce":"41","blockHash":"0xa5da536dfbe8125eb146114e2ee0d0bdef2b20483aacbf30fed6b60f092059e6","transactionIndex":"100","gas":"140000","gasPrice":"52898577246","gasUsed":"105030","cumulativeGasUsed":"11739203","input":"deprecated","contractAddress":"0x76be3b62873462d2142405439777e971754e8e77","from":"0x1e63326a84d2fa207bdfa856da9278a93deba418","to":"0x83f564d180b58ad9a02a449105568189ee7de8cb","tokenID":"10371","tokenValue":"1","tokenName":"parallel","tokenSymbol":"LL","confirmations":"1447769"},{"blockNumber":"14067255","timeStamp":"1643012777","hash":"0x3222b5f71e577c2551e17701eaf39b308b976bbe6bf6ce3f8c20549527b9d6ae","nonce":"7","blockHash":"0x236cfed8b42fa6cb8956f6e7b889797047d9af0883066b1f3be8284beda16e17","transactionIndex":"172","gas":"56873","gasPrice":"69434775835","gasUsed":"52073","cumulativeGasUsed":"17181952","input":"deprecated","contractAddress":"0x76be3b62873462d2142405439777e971754e8e77","from":"0x9d48305f859a0006b57da25c80af62ecb8e5c6a2","to":"0x83f564d180b58ad9a02a449105568189ee7de8cb","tokenID":"10372","tokenValue":"1","tokenName":"parallel","tokenSymbol":"LL","confirmations":"852909"}]}

-----------------------------------------------------------------------------------------------------------------------------------------------------------------
Group-x:       Accounts
Description-y: Get list of Blocks Validated by Address Returns the list of blocks validated by an address.
Endpoint-x:    https://api.etherscan.io/api?module=account&action=getminedblocks&address=0x9dd134d14d1e65f84b706d6f205cd5b1cd03a46b&blocktype=blocks&page=1&offset=10&apikey=YourApiKeyToken
Result:        {"status":"1","message":"OK","result":[{"blockNumber":"3462296","timeStamp":"1491118514","blockReward":"5194770940000000000"},{"blockNumber":"2691400","timeStamp":"1480072029","blockReward":"5086562212310617100"},{"blockNumber":"2687700","timeStamp":"1480018852","blockReward":"5003251945421042780"}]}

-----------------------------------------------------------------------------------------------------------------------------------------------------------------
Group-x:       Accounts
Description-y: Get Beacon Chain Withdrawals by Address and Block Range Returns the beacon chain withdrawals made to an address.
Endpoint-x:    https://api.etherscan.io/api?module=account&action=txsBeaconWithdrawal&address=0xB9D7934878B5FB9610B3fE8A5e441e8fad7E293f&startblock=0&endblock=99999999&page=1&offset=100&sort=asc&apikey=YourApiKeyToken
Result:        {"status":"1","message":"OK","result":[{"withdrawalIndex":"13","validatorIndex":"117823","address":"0xb9d7934878b5fb9610b3fe8a5e441e8fad7e293f","amount":"3402931175","blockNumber":"17034877","timestamp":"1681338599"},{"withdrawalIndex":"14","validatorIndex":"119023","address":"0xb9d7934878b5fb9610b3fe8a5e441e8fad7e293f","amount":"3244098967","blockNumber":"17034877","timestamp":"1681338599"}]}

-----------------------------------------------------------------------------------------------------------------------------------------------------------------
Group-x:       Accounts
Description-y: Get Historical Ether Balance for a Single Address By BlockNo ​ Returns the balance of an address at a certain block height.
Endpoint-x:    https://api.etherscan.io/api?module=account&action=balancehistory&address=0xde0b295669a9fd93d5f28d9ec85e40f4cb697bae&blockno=8000000&apikey=YourApiKeyToken
Result:        {"status":"1","message":"OK","result":"610538078574759898951277"}

-----------------------------------------------------------------------------------------------------------------------------------------------------------------
Group-x:       Contracts
Description-y: Get Contract ABI for ​ Returns the Contract Application Binary Interface ( ABI ) of a verified smart contract.
Endpoint-x:    https://api.etherscan.io/api?module=contract&action=getabi&address=0xBB9bc244D798123fDe783fCc1C72d3Bb8C189413&apikey=YourApiKeyToken
Result:        {"status":"1","message":"OK","result":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"proposals\",\"outputs\":[{\"name\":\"recipient\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"description\",\"type\":\"string\"},{\"name\":\"votingDeadline\",\"type\":\"uint256\"},{\"name\":\"open\",\"type\":\"bool\"},{\"name\":\"proposalPassed\",\"type\":\"bool\"},{\"name\":\"proposalHash\",\"type\":\"bytes32\"},{\"name\":\"proposalDeposit\",\"type\":\"uint256\"},{\"name\":\"newCurator\",\"type\":\"bool\"},{\"name\":\"yea\",\"type\":\"uint256\"},{\"name\":\"nay\",\"type\":\"uint256\"},{\"name\":\"creator\",\"type\":\"address\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minTokensToCreate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rewardAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"daoCreator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"divisor\",\"outputs\":[{\"name\":\"divisor\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"extraBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_proposalID\",\"type\":\"uint256\"},{\"name\":\"_transactionData\",\"type\":\"bytes\"}],\"name\":\"executeProposal\",\"outputs\":[{\"name\":\"_success\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unblockMe\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalRewardToken\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"actualBalance\",\"outputs\":[{\"name\":\"_actualBalance\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"closingTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowedRecipients\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferWithoutReward\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"refund\",\"outputs\":[],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_recipient\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_description\",\"type\":\"string\"},{\"name\":\"_transactionData\",\"type\":\"bytes\"},{\"name\":\"_debatingPeriod\",\"type\":\"uint256\"},{\"name\":\"_newCurator\",\"type\":\"bool\"}],\"name\":\"newProposal\",\"outputs\":[{\"name\":\"_proposalID\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"DAOpaidOut\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minQuorumDivisor\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newContract\",\"type\":\"address\"}],\"name\":\"newContract\",\"outputs\":[],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_recipient\",\"type\":\"address\"},{\"name\":\"_allowed\",\"type\":\"bool\"}],\"name\":\"changeAllowedRecipients\",\"outputs\":[{\"name\":\"_success\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"halveMinQuorum\",\"outputs\":[{\"name\":\"_success\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"paidOut\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_proposalID\",\"type\":\"uint256\"},{\"name\":\"_newCurator\",\"type\":\"address\"}],\"name\":\"splitDAO\",\"outputs\":[{\"name\":\"_success\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DAOrewardAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"proposalDeposit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numberOfProposals\",\"outputs\":[{\"name\":\"_numberOfProposals\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastTimeMinQuorumMet\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_toMembers\",\"type\":\"bool\"}],\"name\":\"retrieveDAOReward\",\"outputs\":[{\"name\":\"_success\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"receiveEther\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isFueled\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenHolder\",\"type\":\"address\"}],\"name\":\"createTokenProxy\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_proposalID\",\"type\":\"uint256\"}],\"name\":\"getNewDAOAddress\",\"outputs\":[{\"name\":\"_newDAO\",\"type\":\"address\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_proposalID\",\"type\":\"uint256\"},{\"name\":\"_supportsProposal\",\"type\":\"bool\"}],\"name\":\"vote\",\"outputs\":[{\"name\":\"_voteID\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getMyReward\",\"outputs\":[{\"name\":\"_success\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewardToken\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFromWithoutReward\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_proposalDeposit\",\"type\":\"uint256\"}],\"name\":\"changeProposalDeposit\",\"outputs\":[],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"blocked\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"curator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_proposalID\",\"type\":\"uint256\"},{\"name\":\"_recipient\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_transactionData\",\"type\":\"bytes\"}],\"name\":\"checkProposalCode\",\"outputs\":[{\"name\":\"_codeChecksOut\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"privateCreation\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"type\":\"function\"},{\"inputs\":[{\"name\":\"_curator\",\"type\":\"address\"},{\"name\":\"_daoCreator\",\"type\":\"address\"},{\"name\":\"_proposalDeposit\",\"type\":\"uint256\"},{\"name\":\"_minTokensToCreate\",\"type\":\"uint256\"},{\"name\":\"_closingTime\",\"type\":\"uint256\"},{\"name\":\"_privateCreation\",\"type\":\"address\"}],\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"FuelingToDate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"CreatedToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Refund\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"proposalID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newCurator\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"description\",\"type\":\"string\"}],\"name\":\"ProposalAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"proposalID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"position\",\"type\":\"bool\"},{\"indexed\":true,\"name\":\"voter\",\"type\":\"address\"}],\"name\":\"Voted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"proposalID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"result\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"quorum\",\"type\":\"uint256\"}],\"name\":\"ProposalTallied\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_newCurator\",\"type\":\"address\"}],\"name\":\"NewCurator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_recipient\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_allowed\",\"type\":\"bool\"}],\"name\":\"AllowedRecipientChanged\",\"type\":\"event\"}]"}

-----------------------------------------------------------------------------------------------------------------------------------------------------------------
Group-x:       Contracts
Description-y: Get Contract Source Code for ​ Returns the Solidity source code of a verified smart contract.
Endpoint-x:    https://api.etherscan.io/api?module=contract&action=getsourcecode&address=0xBB9bc244D798123fDe783fCc1C72d3Bb8C189413&apikey=YourApiKeyToken 
Result:        {"status":"1","message":"OK","result":[{"SourceCode":"/*\n\n- Bytecode Verification performed was compared on second iteration -\n\nThis file is part of the DAO.\n\nThe DAO is free software: you can redistribute it and/or modify\nit under the terms of the GNU lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nThe DAO is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU lesser General Public License for more details.\n\nYou should have received a copy of the GNU lesser General Public License\nalong with the DAO.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\n\n/*\nBasic, standardized Token contract with no \"premine\". Defines the functions to\ncheck token balances, send tokens, send tokens on behalf of a 3rd party and the\ncorresponding approval process. Tokens need to be created by a derived\ncontract (e.g. TokenCreation.sol).\n\nThank you ConsenSys, this contract originated from:\nhttps://github.com/ConsenSys/Tokens/blob/master/Token_Contracts/contracts/Standard_Token.sol\nWhich is itself based on the Ethereum standardized contract APIs:\nhttps://github.com/ethereum/wiki/wiki/Standardized_Contract_APIs\n*/\n\n/// @title Standard Token Contract.\n\ncontract TokenInterface {\n    mapping (address => uint256) balances;\n    mapping (address => mapping (address => uint256)) allowed;\n\n    /// Total amount of tokens\n    uint256 public totalSupply;\n\n    /// @param _owner The address from which the balance will be retrieved\n    /// @return The balance\n    function balanceOf(address _owner) constant returns (uint256 balance);\n\n    /// @notice Send `_amount` tokens to `_to` from `msg.sender`\n    /// @param _to The address of the recipient\n    /// @param _amount The amount of tokens to be transferred\n    /// @return Whether the transfer was successful or not\n    function transfer(address _to, uint256 _amount) returns (bool success);\n\n    /// @notice Send `_amount` tokens to `_to` from `_from` on the condition it\n    /// is approved by `_from`\n    /// @param _from The address of the origin of the transfer\n    /// @param _to The address of the recipient\n    /// @param _amount The amount of tokens to be transferred\n    /// @return Whether the transfer was successful or not\n    function transferFrom(address _from, address _to, uint256 _amount) returns (bool success);\n\n    /// @notice `msg.sender` approves `_spender` to spend `_amount` tokens on\n    /// its behalf\n    /// @param _spender The address of the account able to transfer the tokens\n    /// @param _amount The amount of tokens to be approved for transfer\n    /// @return Whether the approval was successful or not\n    function approve(address _spender, uint256 _amount) returns (bool success);\n\n    /// @param _owner The address of the account owning tokens\n    /// @param _spender The address of the account able to transfer the tokens\n    /// @return Amount of remaining tokens of _owner that _spender is allowed\n    /// to spend\n    function allowance(\n        address _owner,\n        address _spender\n    ) constant returns (uint256 remaining);\n\n    event Transfer(address indexed _from, address indexed _to, uint256 _amount);\n    event Approval(\n        address indexed _owner,\n        address indexed _spender,\n        uint256 _amount\n    );\n}\n\n\ncontract Token is TokenInterface {\n    // Protects users by preventing the execution of method calls that\n    // inadvertently also transferred ether\n    modifier noEther() {if (msg.value > 0) throw; _}\n\n    function balanceOf(address _owner) constant returns (uint256 balance) {\n        return balances[_owner];\n    }\n\n    function transfer(address _to, uint256 _amount) noEther returns (bool success) {\n        if (balances[msg.sender] >= _amount && _amount > 0) {\n            balances[msg.sender] -= _amount;\n            balances[_to] += _amount;\n            Transfer(msg.sender, _to, _amount);\n            return true;\n        } else {\n           return false;\n        }\n    }\n\n    function transferFrom(\n        address _from,\n        address _to,\n        uint256 _amount\n    ) noEther returns (bool success) {\n\n        if (balances[_from] >= _amount\n            && allowed[_from][msg.sender] >= _amount\n            && _amount > 0) {\n\n            balances[_to] += _amount;\n            balances[_from] -= _amount;\n            allowed[_from][msg.sender] -= _amount;\n            Transfer(_from, _to, _amount);\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    function approve(address _spender, uint256 _amount) returns (bool success) {\n        allowed[msg.sender][_spender] = _amount;\n        Approval(msg.sender, _spender, _amount);\n        return true;\n    }\n\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n        return allowed[_owner][_spender];\n    }\n}\n\n\n/*\nThis file is part of the DAO.\n\nThe DAO is free software: you can redistribute it and/or modify\nit under the terms of the GNU lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nThe DAO is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU lesser General Public License for more details.\n\nYou should have received a copy of the GNU lesser General Public License\nalong with the DAO.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\n\n/*\nBasic account, used by the DAO contract to separately manage both the rewards \nand the extraBalance accounts. \n*/\n\ncontract ManagedAccountInterface {\n    // The only address with permission to withdraw from this account\n    address public owner;\n    // If true, only the owner of the account can receive ether from it\n    bool public payOwnerOnly;\n    // The sum of ether (in wei) which has been sent to this contract\n    uint public accumulatedInput;\n\n    /// @notice Sends `_amount` of wei to _recipient\n    /// @param _amount The amount of wei to send to `_recipient`\n    /// @param _recipient The address to receive `_amount` of wei\n    /// @return True if the send completed\n    function payOut(address _recipient, uint _amount) returns (bool);\n\n    event PayOut(address indexed _recipient, uint _amount);\n}\n\n\ncontract ManagedAccount is ManagedAccountInterface{\n\n    // The constructor sets the owner of the account\n    function ManagedAccount(address _owner, bool _payOwnerOnly) {\n        owner = _owner;\n        payOwnerOnly = _payOwnerOnly;\n    }\n\n    // When the contract receives a transaction without data this is called. \n    // It counts the amount of ether it receives and stores it in \n    // accumulatedInput.\n    function() {\n        accumulatedInput += msg.value;\n    }\n\n    function payOut(address _recipient, uint _amount) returns (bool) {\n        if (msg.sender != owner || msg.value > 0 || (payOwnerOnly && _recipient != owner))\n            throw;\n        if (_recipient.call.value(_amount)()) {\n            PayOut(_recipient, _amount);\n            return true;\n        } else {\n            return false;\n        }\n    }\n}\n/*\nThis file is part of the DAO.\n\nThe DAO is free software: you can redistribute it and/or modify\nit under the terms of the GNU lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nThe DAO is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU lesser General Public License for more details.\n\nYou should have received a copy of the GNU lesser General Public License\nalong with the DAO.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\n\n/*\n * Token Creation contract, used by the DAO to create its tokens and initialize\n * its ether. Feel free to modify the divisor method to implement different\n * Token Creation parameters\n*/\n\n\ncontract TokenCreationInterface {\n\n    // End of token creation, in Unix time\n    uint public closingTime;\n    // Minimum fueling goal of the token creation, denominated in tokens to\n    // be created\n    uint public minTokensToCreate;\n    // True if the DAO reached its minimum fueling goal, false otherwise\n    bool public isFueled;\n    // For DAO splits - if privateCreation is 0, then it is a public token\n    // creation, otherwise only the address stored in privateCreation is\n    // allowed to create tokens\n    address public privateCreation;\n    // hold extra ether which has been sent after the DAO token\n    // creation rate has increased\n    ManagedAccount public extraBalance;\n    // tracks the amount of wei given from each contributor (used for refund)\n    mapping (address => uint256) weiGiven;\n\n    /// @dev Constructor setting the minimum fueling goal and the\n    /// end of the Token Creation\n    /// @param _minTokensToCreate Minimum fueling goal in number of\n    ///        Tokens to be created\n    /// @param _closingTime Date (in Unix time) of the end of the Token Creation\n    /// @param _privateCreation Zero means that the creation is public.  A\n    /// non-zero address represents the only address that can create Tokens\n    /// (the address can also create Tokens on behalf of other accounts)\n    // This is the constructor: it can not be overloaded so it is commented out\n    //  function TokenCreation(\n        //  uint _minTokensTocreate,\n        //  uint _closingTime,\n        //  address _privateCreation\n    //  );\n\n    /// @notice Create Token with `_tokenHolder` as the initial owner of the Token\n    /// @param _tokenHolder The address of the Tokens's recipient\n    /// @return Whether the token creation was successful\n    function createTokenProxy(address _tokenHolder) returns (bool success);\n\n    /// @notice Refund `msg.sender` in the case the Token Creation did\n    /// not reach its minimum fueling goal\n    function refund();\n\n    /// @return The divisor used to calculate the token creation rate during\n    /// the creation phase\n    function divisor() constant returns (uint divisor);\n\n    event FuelingToDate(uint value);\n    event CreatedToken(address indexed to, uint amount);\n    event Refund(address indexed to, uint value);\n}\n\n\ncontract TokenCreation is TokenCreationInterface, Token {\n    function TokenCreation(\n        uint _minTokensToCreate,\n        uint _closingTime,\n        address _privateCreation) {\n\n        closingTime = _closingTime;\n        minTokensToCreate = _minTokensToCreate;\n        privateCreation = _privateCreation;\n        extraBalance = new ManagedAccount(address(this), true);\n    }\n\n    function createTokenProxy(address _tokenHolder) returns (bool success) {\n        if (now < closingTime && msg.value > 0\n            && (privateCreation == 0 || privateCreation == msg.sender)) {\n\n            uint token = (msg.value * 20) / divisor();\n            extraBalance.call.value(msg.value - token)();\n            balances[_tokenHolder] += token;\n            totalSupply += token;\n            weiGiven[_tokenHolder] += msg.value;\n            CreatedToken(_tokenHolder, token);\n            if (totalSupply >= minTokensToCreate && !isFueled) {\n                isFueled = true;\n                FuelingToDate(totalSupply);\n            }\n            return true;\n        }\n        throw;\n    }\n\n    function refund() noEther {\n        if (now > closingTime && !isFueled) {\n            // Get extraBalance - will only succeed when called for the first time\n            if (extraBalance.balance >= extraBalance.accumulatedInput())\n                extraBalance.payOut(address(this), extraBalance.accumulatedInput());\n\n            // Execute refund\n            if (msg.sender.call.value(weiGiven[msg.sender])()) {\n                Refund(msg.sender, weiGiven[msg.sender]);\n                totalSupply -= balances[msg.sender];\n                balances[msg.sender] = 0;\n                weiGiven[msg.sender] = 0;\n            }\n        }\n    }\n\n    function divisor() constant returns (uint divisor) {\n        // The number of (base unit) tokens per wei is calculated\n        // as `msg.value` * 20 / `divisor`\n        // The fueling period starts with a 1:1 ratio\n        if (closingTime - 2 weeks > now) {\n            return 20;\n        // Followed by 10 days with a daily creation rate increase of 5%\n        } else if (closingTime - 4 days > now) {\n            return (20 + (now - (closingTime - 2 weeks)) / (1 days));\n        // The last 4 days there is a constant creation rate ratio of 1:1.5\n        } else {\n            return 30;\n        }\n    }\n}\n/*\nThis file is part of the DAO.\n\nThe DAO is free software: you can redistribute it and/or modify\nit under the terms of the GNU lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nThe DAO is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU lesser General Public License for more details.\n\nYou should have received a copy of the GNU lesser General Public License\nalong with the DAO.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\n\n/*\nStandard smart contract for a Decentralized Autonomous Organization (DAO)\nto automate organizational governance and decision-making.\n*/\n\n\ncontract DAOInterface {\n\n    // The amount of days for which people who try to participate in the\n    // creation by calling the fallback function will still get their ether back\n    uint constant creationGracePeriod = 40 days;\n    // The minimum debate period that a generic proposal can have\n    uint constant minProposalDebatePeriod = 2 weeks;\n    // The minimum debate period that a split proposal can have\n    uint constant minSplitDebatePeriod = 1 weeks;\n    // Period of days inside which it's possible to execute a DAO split\n    uint constant splitExecutionPeriod = 27 days;\n    // Period of time after which the minimum Quorum is halved\n    uint constant quorumHalvingPeriod = 25 weeks;\n    // Period after which a proposal is closed\n    // (used in the case `executeProposal` fails because it throws)\n    uint constant executeProposalPeriod = 10 days;\n    // Denotes the maximum proposal deposit that can be given. It is given as\n    // a fraction of total Ether spent plus balance of the DAO\n    uint constant maxDepositDivisor = 100;\n\n    // Proposals to spend the DAO's ether or to choose a new Curator\n    Proposal[] public proposals;\n    // The quorum needed for each proposal is partially calculated by\n    // totalSupply / minQuorumDivisor\n    uint public minQuorumDivisor;\n    // The unix time of the last time quorum was reached on a proposal\n    uint  public lastTimeMinQuorumMet;\n\n    // Address of the curator\n    address public curator;\n    // The whitelist: List of addresses the DAO is allowed to send ether to\n    mapping (address => bool) public allowedRecipients;\n\n    // Tracks the addresses that own Reward Tokens. Those addresses can only be\n    // DAOs that have split from the original DAO. Conceptually, Reward Tokens\n    // represent the proportion of the rewards that the DAO has the right to\n    // receive. These Reward Tokens are generated when the DAO spends ether.\n    mapping (address => uint) public rewardToken;\n    // Total supply of rewardToken\n    uint public totalRewardToken;\n\n    // The account used to manage the rewards which are to be distributed to the\n    // DAO Token Holders of this DAO\n    ManagedAccount public rewardAccount;\n\n    // The account used to manage the rewards which are to be distributed to\n    // any DAO that holds Reward Tokens\n    ManagedAccount public DAOrewardAccount;\n\n    // Amount of rewards (in wei) already paid out to a certain DAO\n    mapping (address => uint) public DAOpaidOut;\n\n    // Amount of rewards (in wei) already paid out to a certain address\n    mapping (address => uint) public paidOut;\n    // Map of addresses blocked during a vote (not allowed to transfer DAO\n    // tokens). The address points to the proposal ID.\n    mapping (address => uint) public blocked;\n\n    // The minimum deposit (in wei) required to submit any proposal that is not\n    // requesting a new Curator (no deposit is required for splits)\n    uint public proposalDeposit;\n\n    // the accumulated sum of all current proposal deposits\n    uint sumOfProposalDeposits;\n\n    // Contract that is able to create a new DAO (with the same code as\n    // this one), used for splits\n    DAO_Creator public daoCreator;\n\n    // A proposal with `newCurator == false` represents a transaction\n    // to be issued by this DAO\n    // A proposal with `newCurator == true` represents a DAO split\n    struct Proposal {\n        // The address where the `amount` will go to if the proposal is accepted\n        // or if `newCurator` is true, the proposed Curator of\n        // the new DAO).\n        address recipient;\n        // The amount to transfer to `recipient` if the proposal is accepted.\n        uint amount;\n        // A plain text description of the proposal\n        string description;\n        // A unix timestamp, denoting the end of the voting period\n        uint votingDeadline;\n        // True if the proposal's votes have yet to be counted, otherwise False\n        bool open;\n        // True if quorum has been reached, the votes have been counted, and\n        // the majority said yes\n        bool proposalPassed;\n        // A hash to check validity of a proposal\n        bytes32 proposalHash;\n        // Deposit in wei the creator added when submitting their proposal. It\n        // is taken from the msg.value of a newProposal call.\n        uint proposalDeposit;\n        // True if this proposal is to assign a new Curator\n        bool newCurator;\n        // Data needed for splitting the DAO\n        SplitData[] splitData;\n        // Number of Tokens in favor of the proposal\n        uint yea;\n        // Number of Tokens opposed to the proposal\n        uint nay;\n        // Simple mapping to check if a shareholder has voted for it\n        mapping (address => bool) votedYes;\n        // Simple mapping to check if a shareholder has voted against it\n        mapping (address => bool) votedNo;\n        // Address of the shareholder who created the proposal\n        address creator;\n    }\n\n    // Used only in the case of a newCurator proposal.\n    struct SplitData {\n        // The balance of the current DAO minus the deposit at the time of split\n        uint splitBalance;\n        // The total amount of DAO Tokens in existence at the time of split.\n        uint totalSupply;\n        // Amount of Reward Tokens owned by the DAO at the time of split.\n        uint rewardToken;\n        // The new DAO contract created at the time of split.\n        DAO newDAO;\n    }\n\n    // Used to restrict access to certain functions to only DAO Token Holders\n    modifier onlyTokenholders {}\n\n    /// @dev Constructor setting the Curator and the address\n    /// for the contract able to create another DAO as well as the parameters\n    /// for the DAO Token Creation\n    /// @param _curator The Curator\n    /// @param _daoCreator The contract able to (re)create this DAO\n    /// @param _proposalDeposit The deposit to be paid for a regular proposal\n    /// @param _minTokensToCreate Minimum required wei-equivalent tokens\n    ///        to be created for a successful DAO Token Creation\n    /// @param _closingTime Date (in Unix time) of the end of the DAO Token Creation\n    /// @param _privateCreation If zero the DAO Token Creation is open to public, a\n    /// non-zero address means that the DAO Token Creation is only for the address\n    // This is the constructor: it can not be overloaded so it is commented out\n    //  function DAO(\n        //  address _curator,\n        //  DAO_Creator _daoCreator,\n        //  uint _proposalDeposit,\n        //  uint _minTokensToCreate,\n        //  uint _closingTime,\n        //  address _privateCreation\n    //  );\n\n    /// @notice Create Token with `msg.sender` as the beneficiary\n    /// @return Whether the token creation was successful\n    function () returns (bool success);\n\n\n    /// @dev This function is used to send ether back\n    /// to the DAO, it can also be used to receive payments that should not be\n    /// counted as rewards (donations, grants, etc.)\n    /// @return Whether the DAO received the ether successfully\n    function receiveEther() returns(bool);\n\n    /// @notice `msg.sender` creates a proposal to send `_amount` Wei to\n    /// `_recipient` with the transaction data `_transactionData`. If\n    /// `_newCurator` is true, then this is a proposal that splits the\n    /// DAO and sets `_recipient` as the new DAO's Curator.\n    /// @param _recipient Address of the recipient of the proposed transaction\n    /// @param _amount Amount of wei to be sent with the proposed transaction\n    /// @param _description String describing the proposal\n    /// @param _transactionData Data of the proposed transaction\n    /// @param _debatingPeriod Time used for debating a proposal, at least 2\n    /// weeks for a regular proposal, 10 days for new Curator proposal\n    /// @param _newCurator Bool defining whether this proposal is about\n    /// a new Curator or not\n    /// @return The proposal ID. Needed for voting on the proposal\n    function newProposal(\n        address _recipient,\n        uint _amount,\n        string _description,\n        bytes _transactionData,\n        uint _debatingPeriod,\n        bool _newCurator\n    ) onlyTokenholders returns (uint _proposalID);\n\n    /// @notice Check that the proposal with the ID `_proposalID` matches the\n    /// transaction which sends `_amount` with data `_transactionData`\n    /// to `_recipient`\n    /// @param _proposalID The proposal ID\n    /// @param _recipient The recipient of the proposed transaction\n    /// @param _amount The amount of wei to be sent in the proposed transaction\n    /// @param _transactionData The data of the proposed transaction\n    /// @return Whether the proposal ID matches the transaction data or not\n    function checkProposalCode(\n        uint _proposalID,\n        address _recipient,\n        uint _amount,\n        bytes _transactionData\n    ) constant returns (bool _codeChecksOut);\n\n    /// @notice Vote on proposal `_proposalID` with `_supportsProposal`\n    /// @param _proposalID The proposal ID\n    /// @param _supportsProposal Yes/No - support of the proposal\n    /// @return The vote ID.\n    function vote(\n        uint _proposalID,\n        bool _supportsProposal\n    ) onlyTokenholders returns (uint _voteID);\n\n    /// @notice Checks whether proposal `_proposalID` with transaction data\n    /// `_transactionData` has been voted for or rejected, and executes the\n    /// transaction in the case it has been voted for.\n    /// @param _proposalID The proposal ID\n    /// @param _transactionData The data of the proposed transaction\n    /// @return Whether the proposed transaction has been executed or not\n    function executeProposal(\n        uint _proposalID,\n        bytes _transactionData\n    ) returns (bool _success);\n\n    /// @notice ATTENTION! I confirm to move my remaining ether to a new DAO\n    /// with `_newCurator` as the new Curator, as has been\n    /// proposed in proposal `_proposalID`. This will burn my tokens. This can\n    /// not be undone and will split the DAO into two DAO's, with two\n    /// different underlying tokens.\n    /// @param _proposalID The proposal ID\n    /// @param _newCurator The new Curator of the new DAO\n    /// @dev This function, when called for the first time for this proposal,\n    /// will create a new DAO and send the sender's portion of the remaining\n    /// ether and Reward Tokens to the new DAO. It will also burn the DAO Tokens\n    /// of the sender.\n    function splitDAO(\n        uint _proposalID,\n        address _newCurator\n    ) returns (bool _success);\n\n    /// @dev can only be called by the DAO itself through a proposal\n    /// updates the contract of the DAO by sending all ether and rewardTokens\n    /// to the new DAO. The new DAO needs to be approved by the Curator\n    /// @param _newContract the address of the new contract\n    function newContract(address _newContract);\n\n\n    /// @notice Add a new possible recipient `_recipient` to the whitelist so\n    /// that the DAO can send transactions to them (using proposals)\n    /// @param _recipient New recipient address\n    /// @dev Can only be called by the current Curator\n    /// @return Whether successful or not\n    function changeAllowedRecipients(address _recipient, bool _allowed) external returns (bool _success);\n\n\n    /// @notice Change the minimum deposit required to submit a proposal\n    /// @param _proposalDeposit The new proposal deposit\n    /// @dev Can only be called by this DAO (through proposals with the\n    /// recipient being this DAO itself)\n    function changeProposalDeposit(uint _proposalDeposit) external;\n\n    /// @notice Move rewards from the DAORewards managed account\n    /// @param _toMembers If true rewards are moved to the actual reward account\n    ///                   for the DAO. If not then it's moved to the DAO itself\n    /// @return Whether the call was successful\n    function retrieveDAOReward(bool _toMembers) external returns (bool _success);\n\n    /// @notice Get my portion of the reward that was sent to `rewardAccount`\n    /// @return Whether the call was successful\n    function getMyReward() returns(bool _success);\n\n    /// @notice Withdraw `_account`'s portion of the reward from `rewardAccount`\n    /// to `_account`'s balance\n    /// @return Whether the call was successful\n    function withdrawRewardFor(address _account) internal returns (bool _success);\n\n    /// @notice Send `_amount` tokens to `_to` from `msg.sender`. Prior to this\n    /// getMyReward() is called.\n    /// @param _to The address of the recipient\n    /// @param _amount The amount of tokens to be transfered\n    /// @return Whether the transfer was successful or not\n    function transferWithoutReward(address _to, uint256 _amount) returns (bool success);\n\n    /// @notice Send `_amount` tokens to `_to` from `_from` on the condition it\n    /// is approved by `_from`. Prior to this getMyReward() is called.\n    /// @param _from The address of the sender\n    /// @param _to The address of the recipient\n    /// @param _amount The amount of tokens to be transfered\n    /// @return Whether the transfer was successful or not\n    function transferFromWithoutReward(\n        address _from,\n        address _to,\n        uint256 _amount\n    ) returns (bool success);\n\n    /// @notice Doubles the 'minQuorumDivisor' in the case quorum has not been\n    /// achieved in 52 weeks\n    /// @return Whether the change was successful or not\n    function halveMinQuorum() returns (bool _success);\n\n    /// @return total number of proposals ever created\n    function numberOfProposals() constant returns (uint _numberOfProposals);\n\n    /// @param _proposalID Id of the new curator proposal\n    /// @return Address of the new DAO\n    function getNewDAOAddress(uint _proposalID) constant returns (address _newDAO);\n\n    /// @param _account The address of the account which is checked.\n    /// @return Whether the account is blocked (not allowed to transfer tokens) or not.\n    function isBlocked(address _account) internal returns (bool);\n\n    /// @notice If the caller is blocked by a proposal whose voting deadline\n    /// has exprired then unblock him.\n    /// @return Whether the account is blocked (not allowed to transfer tokens) or not.\n    function unblockMe() returns (bool);\n\n    event ProposalAdded(\n        uint indexed proposalID,\n        address recipient,\n        uint amount,\n        bool newCurator,\n        string description\n    );\n    event Voted(uint indexed proposalID, bool position, address indexed voter);\n    event ProposalTallied(uint indexed proposalID, bool result, uint quorum);\n    event NewCurator(address indexed _newCurator);\n    event AllowedRecipientChanged(address indexed _recipient, bool _allowed);\n}\n\n// The DAO contract itself\ncontract DAO is DAOInterface, Token, TokenCreation {\n\n    // Modifier that allows only shareholders to vote and create new proposals\n    modifier onlyTokenholders {\n        if (balanceOf(msg.sender) == 0) throw;\n            _\n    }\n\n    function DAO(\n        address _curator,\n        DAO_Creator _daoCreator,\n        uint _proposalDeposit,\n        uint _minTokensToCreate,\n        uint _closingTime,\n        address _privateCreation\n    ) TokenCreation(_minTokensToCreate, _closingTime, _privateCreation) {\n\n        curator = _curator;\n        daoCreator = _daoCreator;\n        proposalDeposit = _proposalDeposit;\n        rewardAccount = new ManagedAccount(address(this), false);\n        DAOrewardAccount = new ManagedAccount(address(this), false);\n        if (address(rewardAccount) == 0)\n            throw;\n        if (address(DAOrewardAccount) == 0)\n            throw;\n        lastTimeMinQuorumMet = now;\n        minQuorumDivisor = 5; // sets the minimal quorum to 20%\n        proposals.length = 1; // avoids a proposal with ID 0 because it is used\n\n        allowedRecipients[address(this)] = true;\n        allowedRecipients[curator] = true;\n    }\n\n    function () returns (bool success) {\n        if (now < closingTime + creationGracePeriod && msg.sender != address(extraBalance))\n            return createTokenProxy(msg.sender);\n        else\n            return receiveEther();\n    }\n\n\n    function receiveEther() returns (bool) {\n        return true;\n    }\n\n\n    function newProposal(\n        address _recipient,\n        uint _amount,\n        string _description,\n        bytes _transactionData,\n        uint _debatingPeriod,\n        bool _newCurator\n    ) onlyTokenholders returns (uint _proposalID) {\n\n        // Sanity check\n        if (_newCurator && (\n            _amount != 0\n            || _transactionData.length != 0\n            || _recipient == curator\n            || msg.value > 0\n            || _debatingPeriod < minSplitDebatePeriod)) {\n            throw;\n        } else if (\n            !_newCurator\n            && (!isRecipientAllowed(_recipient) || (_debatingPeriod <  minProposalDebatePeriod))\n        ) {\n            throw;\n        }\n\n        if (_debatingPeriod > 8 weeks)\n            throw;\n\n        if (!isFueled\n            || now < closingTime\n            || (msg.value < proposalDeposit && !_newCurator)) {\n\n            throw;\n        }\n\n        if (now + _debatingPeriod < now) // prevents overflow\n            throw;\n\n        // to prevent a 51% attacker to convert the ether into deposit\n        if (msg.sender == address(this))\n            throw;\n\n        _proposalID = proposals.length++;\n        Proposal p = proposals[_proposalID];\n        p.recipient = _recipient;\n        p.amount = _amount;\n        p.description = _description;\n        p.proposalHash = sha3(_recipient, _amount, _transactionData);\n        p.votingDeadline = now + _debatingPeriod;\n        p.open = true;\n        //p.proposalPassed = False; // that's default\n        p.newCurator = _newCurator;\n        if (_newCurator)\n            p.splitData.length++;\n        p.creator = msg.sender;\n        p.proposalDeposit = msg.value;\n\n        sumOfProposalDeposits += msg.value;\n\n        ProposalAdded(\n            _proposalID,\n            _recipient,\n            _amount,\n            _newCurator,\n            _description\n        );\n    }\n\n\n    function checkProposalCode(\n        uint _proposalID,\n        address _recipient,\n        uint _amount,\n        bytes _transactionData\n    ) noEther constant returns (bool _codeChecksOut) {\n        Proposal p = proposals[_proposalID];\n        return p.proposalHash == sha3(_recipient, _amount, _transactionData);\n    }\n\n\n    function vote(\n        uint _proposalID,\n        bool _supportsProposal\n    ) onlyTokenholders noEther returns (uint _voteID) {\n\n        Proposal p = proposals[_proposalID];\n        if (p.votedYes[msg.sender]\n            || p.votedNo[msg.sender]\n            || now >= p.votingDeadline) {\n\n            throw;\n        }\n\n        if (_supportsProposal) {\n            p.yea += balances[msg.sender];\n            p.votedYes[msg.sender] = true;\n        } else {\n            p.nay += balances[msg.sender];\n            p.votedNo[msg.sender] = true;\n        }\n\n        if (blocked[msg.sender] == 0) {\n            blocked[msg.sender] = _proposalID;\n        } else if (p.votingDeadline > proposals[blocked[msg.sender]].votingDeadline) {\n            // this proposal's voting deadline is further into the future than\n            // the proposal that blocks the sender so make it the blocker\n            blocked[msg.sender] = _proposalID;\n        }\n\n        Voted(_proposalID, _supportsProposal, msg.sender);\n    }\n\n\n    function executeProposal(\n        uint _proposalID,\n        bytes _transactionData\n    ) noEther returns (bool _success) {\n\n        Proposal p = proposals[_proposalID];\n\n        uint waitPeriod = p.newCurator\n            ? splitExecutionPeriod\n            : executeProposalPeriod;\n        // If we are over deadline and waiting period, assert proposal is closed\n        if (p.open && now > p.votingDeadline + waitPeriod) {\n            closeProposal(_proposalID);\n            return;\n        }\n\n        // Check if the proposal can be executed\n        if (now < p.votingDeadline  // has the voting deadline arrived?\n            // Have the votes been counted?\n            || !p.open\n            // Does the transaction code match the proposal?\n            || p.proposalHash != sha3(p.recipient, p.amount, _transactionData)) {\n\n            throw;\n        }\n\n        // If the curator removed the recipient from the whitelist, close the proposal\n        // in order to free the deposit and allow unblocking of voters\n        if (!isRecipientAllowed(p.recipient)) {\n            closeProposal(_proposalID);\n            p.creator.send(p.proposalDeposit);\n            return;\n        }\n\n        bool proposalCheck = true;\n\n        if (p.amount > actualBalance())\n            proposalCheck = false;\n\n        uint quorum = p.yea + p.nay;\n\n        // require 53% for calling newContract()\n        if (_transactionData.length >= 4 && _transactionData[0] == 0x68\n            && _transactionData[1] == 0x37 && _transactionData[2] == 0xff\n            && _transactionData[3] == 0x1e\n            && quorum < minQuorum(actualBalance() + rewardToken[address(this)])) {\n\n                proposalCheck = false;\n        }\n\n        if (quorum >= minQuorum(p.amount)) {\n            if (!p.creator.send(p.proposalDeposit))\n                throw;\n\n            lastTimeMinQuorumMet = now;\n            // set the minQuorum to 20% again, in the case it has been reached\n            if (quorum > totalSupply / 5)\n                minQuorumDivisor = 5;\n        }\n\n        // Execute result\n        if (quorum >= minQuorum(p.amount) && p.yea > p.nay && proposalCheck) {\n            if (!p.recipient.call.value(p.amount)(_transactionData))\n                throw;\n\n            p.proposalPassed = true;\n            _success = true;\n\n            // only create reward tokens when ether is not sent to the DAO itself and\n            // related addresses. Proxy addresses should be forbidden by the curator.\n            if (p.recipient != address(this) && p.recipient != address(rewardAccount)\n                && p.recipient != address(DAOrewardAccount)\n                && p.recipient != address(extraBalance)\n                && p.recipient != address(curator)) {\n\n                rewardToken[address(this)] += p.amount;\n                totalRewardToken += p.amount;\n            }\n        }\n\n        closeProposal(_proposalID);\n\n        // Initiate event\n        ProposalTallied(_proposalID, _success, quorum);\n    }\n\n\n    function closeProposal(uint _proposalID) internal {\n        Proposal p = proposals[_proposalID];\n        if (p.open)\n            sumOfProposalDeposits -= p.proposalDeposit;\n        p.open = false;\n    }\n\n    function splitDAO(\n        uint _proposalID,\n        address _newCurator\n    ) noEther onlyTokenholders returns (bool _success) {\n\n        Proposal p = proposals[_proposalID];\n\n        // Sanity check\n\n        if (now < p.votingDeadline  // has the voting deadline arrived?\n            //The request for a split expires XX days after the voting deadline\n            || now > p.votingDeadline + splitExecutionPeriod\n            // Does the new Curator address match?\n            || p.recipient != _newCurator\n            // Is it a new curator proposal?\n            || !p.newCurator\n            // Have you voted for this split?\n            || !p.votedYes[msg.sender]\n            // Did you already vote on another proposal?\n            || (blocked[msg.sender] != _proposalID && blocked[msg.sender] != 0) )  {\n\n            throw;\n        }\n\n        // If the new DAO doesn't exist yet, create the new DAO and store the\n        // current split data\n        if (address(p.splitData[0].newDAO) == 0) {\n            p.splitData[0].newDAO = createNewDAO(_newCurator);\n            // Call depth limit reached, etc.\n            if (address(p.splitData[0].newDAO) == 0)\n                throw;\n            // should never happen\n            if (this.balance < sumOfProposalDeposits)\n                throw;\n            p.splitData[0].splitBalance = actualBalance();\n            p.splitData[0].rewardToken = rewardToken[address(this)];\n            p.splitData[0].totalSupply = totalSupply;\n            p.proposalPassed = true;\n        }\n\n        // Move ether and assign new Tokens\n        uint fundsToBeMoved =\n            (balances[msg.sender] * p.splitData[0].splitBalance) /\n            p.splitData[0].totalSupply;\n        if (p.splitData[0].newDAO.createTokenProxy.value(fundsToBeMoved)(msg.sender) == false)\n            throw;\n\n\n        // Assign reward rights to new DAO\n        uint rewardTokenToBeMoved =\n            (balances[msg.sender] * p.splitData[0].rewardToken) /\n            p.splitData[0].totalSupply;\n\n        uint paidOutToBeMoved = DAOpaidOut[address(this)] * rewardTokenToBeMoved /\n            rewardToken[address(this)];\n\n        rewardToken[address(p.splitData[0].newDAO)] += rewardTokenToBeMoved;\n        if (rewardToken[address(this)] < rewardTokenToBeMoved)\n            throw;\n        rewardToken[address(this)] -= rewardTokenToBeMoved;\n\n        DAOpaidOut[address(p.splitData[0].newDAO)] += paidOutToBeMoved;\n        if (DAOpaidOut[address(this)] < paidOutToBeMoved)\n            throw;\n        DAOpaidOut[address(this)] -= paidOutToBeMoved;\n\n        // Burn DAO Tokens\n        Transfer(msg.sender, 0, balances[msg.sender]);\n        withdrawRewardFor(msg.sender); // be nice, and get his rewards\n        totalSupply -= balances[msg.sender];\n        balances[msg.sender] = 0;\n        paidOut[msg.sender] = 0;\n        return true;\n    }\n\n    function newContract(address _newContract){\n        if (msg.sender != address(this) || !allowedRecipients[_newContract]) return;\n        // move all ether\n        if (!_newContract.call.value(address(this).balance)()) {\n            throw;\n        }\n\n        //move all reward tokens\n        rewardToken[_newContract] += rewardToken[address(this)];\n        rewardToken[address(this)] = 0;\n        DAOpaidOut[_newContract] += DAOpaidOut[address(this)];\n        DAOpaidOut[address(this)] = 0;\n    }\n\n\n    function retrieveDAOReward(bool _toMembers) external noEther returns (bool _success) {\n        DAO dao = DAO(msg.sender);\n\n        if ((rewardToken[msg.sender] * DAOrewardAccount.accumulatedInput()) /\n            totalRewardToken < DAOpaidOut[msg.sender])\n            throw;\n\n        uint reward =\n            (rewardToken[msg.sender] * DAOrewardAccount.accumulatedInput()) /\n            totalRewardToken - DAOpaidOut[msg.sender];\n        if(_toMembers) {\n            if (!DAOrewardAccount.payOut(dao.rewardAccount(), reward))\n                throw;\n            }\n        else {\n            if (!DAOrewardAccount.payOut(dao, reward))\n                throw;\n        }\n        DAOpaidOut[msg.sender] += reward;\n        return true;\n    }\n\n    function getMyReward() noEther returns (bool _success) {\n        return withdrawRewardFor(msg.sender);\n    }\n\n\n    function withdrawRewardFor(address _account) noEther internal returns (bool _success) {\n        if ((balanceOf(_account) * rewardAccount.accumulatedInput()) / totalSupply < paidOut[_account])\n            throw;\n\n        uint reward =\n            (balanceOf(_account) * rewardAccount.accumulatedInput()) / totalSupply - paidOut[_account];\n        if (!rewardAccount.payOut(_account, reward))\n            throw;\n        paidOut[_account] += reward;\n        return true;\n    }\n\n\n    function transfer(address _to, uint256 _value) returns (bool success) {\n        if (isFueled\n            && now > closingTime\n            && !isBlocked(msg.sender)\n            && transferPaidOut(msg.sender, _to, _value)\n            && super.transfer(_to, _value)) {\n\n            return true;\n        } else {\n            throw;\n        }\n    }\n\n\n    function transferWithoutReward(address _to, uint256 _value) returns (bool success) {\n        if (!getMyReward())\n            throw;\n        return transfer(_to, _value);\n    }\n\n\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n        if (isFueled\n            && now > closingTime\n            && !isBlocked(_from)\n            && transferPaidOut(_from, _to, _value)\n            && super.transferFrom(_from, _to, _value)) {\n\n            return true;\n        } else {\n            throw;\n        }\n    }\n\n\n    function transferFromWithoutReward(\n        address _from,\n        address _to,\n        uint256 _value\n    ) returns (bool success) {\n\n        if (!withdrawRewardFor(_from))\n            throw;\n        return transferFrom(_from, _to, _value);\n    }\n\n\n    function transferPaidOut(\n        address _from,\n        address _to,\n        uint256 _value\n    ) internal returns (bool success) {\n\n        uint transferPaidOut = paidOut[_from] * _value / balanceOf(_from);\n        if (transferPaidOut > paidOut[_from])\n            throw;\n        paidOut[_from] -= transferPaidOut;\n        paidOut[_to] += transferPaidOut;\n        return true;\n    }\n\n\n    function changeProposalDeposit(uint _proposalDeposit) noEther external {\n        if (msg.sender != address(this) || _proposalDeposit > (actualBalance() + rewardToken[address(this)])\n            / maxDepositDivisor) {\n\n            throw;\n        }\n        proposalDeposit = _proposalDeposit;\n    }\n\n\n    function changeAllowedRecipients(address _recipient, bool _allowed) noEther external returns (bool _success) {\n        if (msg.sender != curator)\n            throw;\n        allowedRecipients[_recipient] = _allowed;\n        AllowedRecipientChanged(_recipient, _allowed);\n        return true;\n    }\n\n\n    function isRecipientAllowed(address _recipient) internal returns (bool _isAllowed) {\n        if (allowedRecipients[_recipient]\n            || (_recipient == address(extraBalance)\n                // only allowed when at least the amount held in the\n                // extraBalance account has been spent from the DAO\n                && totalRewardToken > extraBalance.accumulatedInput()))\n            return true;\n        else\n            return false;\n    }\n\n    function actualBalance() constant returns (uint _actualBalance) {\n        return this.balance - sumOfProposalDeposits;\n    }\n\n\n    function minQuorum(uint _value) internal constant returns (uint _minQuorum) {\n        // minimum of 20% and maximum of 53.33%\n        return totalSupply / minQuorumDivisor +\n            (_value * totalSupply) / (3 * (actualBalance() + rewardToken[address(this)]));\n    }\n\n\n    function halveMinQuorum() returns (bool _success) {\n        // this can only be called after `quorumHalvingPeriod` has passed or at anytime\n        // by the curator with a delay of at least `minProposalDebatePeriod` between the calls\n        if ((lastTimeMinQuorumMet < (now - quorumHalvingPeriod) || msg.sender == curator)\n            && lastTimeMinQuorumMet < (now - minProposalDebatePeriod)) {\n            lastTimeMinQuorumMet = now;\n            minQuorumDivisor *= 2;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    function createNewDAO(address _newCurator) internal returns (DAO _newDAO) {\n        NewCurator(_newCurator);\n        return daoCreator.createDAO(_newCurator, 0, 0, now + splitExecutionPeriod);\n    }\n\n    function numberOfProposals() constant returns (uint _numberOfProposals) {\n        // Don't count index 0. It's used by isBlocked() and exists from start\n        return proposals.length - 1;\n    }\n\n    function getNewDAOAddress(uint _proposalID) constant returns (address _newDAO) {\n        return proposals[_proposalID].splitData[0].newDAO;\n    }\n\n    function isBlocked(address _account) internal returns (bool) {\n        if (blocked[_account] == 0)\n            return false;\n        Proposal p = proposals[blocked[_account]];\n        if (now > p.votingDeadline) {\n            blocked[_account] = 0;\n            return false;\n        } else {\n            return true;\n        }\n    }\n\n    function unblockMe() returns (bool) {\n        return isBlocked(msg.sender);\n    }\n}\n\ncontract DAO_Creator {\n    function createDAO(\n        address _curator,\n        uint _proposalDeposit,\n        uint _minTokensToCreate,\n        uint _closingTime\n    ) returns (DAO _newDAO) {\n\n        return new DAO(\n            _curator,\n            DAO_Creator(this),\n            _proposalDeposit,\n            _minTokensToCreate,\n            _closingTime,\n            msg.sender\n        );\n    }\n}\n","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"proposals\",\"outputs\":[{\"name\":\"recipient\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"description\",\"type\":\"string\"},{\"name\":\"votingDeadline\",\"type\":\"uint256\"},{\"name\":\"open\",\"type\":\"bool\"},{\"name\":\"proposalPassed\",\"type\":\"bool\"},{\"name\":\"proposalHash\",\"type\":\"bytes32\"},{\"name\":\"proposalDeposit\",\"type\":\"uint256\"},{\"name\":\"newCurator\",\"type\":\"bool\"},{\"name\":\"yea\",\"type\":\"uint256\"},{\"name\":\"nay\",\"type\":\"uint256\"},{\"name\":\"creator\",\"type\":\"address\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minTokensToCreate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rewardAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"daoCreator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"divisor\",\"outputs\":[{\"name\":\"divisor\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"extraBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_proposalID\",\"type\":\"uint256\"},{\"name\":\"_transactionData\",\"type\":\"bytes\"}],\"name\":\"executeProposal\",\"outputs\":[{\"name\":\"_success\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unblockMe\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalRewardToken\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"actualBalance\",\"outputs\":[{\"name\":\"_actualBalance\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"closingTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowedRecipients\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferWithoutReward\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"refund\",\"outputs\":[],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_recipient\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_description\",\"type\":\"string\"},{\"name\":\"_transactionData\",\"type\":\"bytes\"},{\"name\":\"_debatingPeriod\",\"type\":\"uint256\"},{\"name\":\"_newCurator\",\"type\":\"bool\"}],\"name\":\"newProposal\",\"outputs\":[{\"name\":\"_proposalID\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"DAOpaidOut\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minQuorumDivisor\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newContract\",\"type\":\"address\"}],\"name\":\"newContract\",\"outputs\":[],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_recipient\",\"type\":\"address\"},{\"name\":\"_allowed\",\"type\":\"bool\"}],\"name\":\"changeAllowedRecipients\",\"outputs\":[{\"name\":\"_success\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"halveMinQuorum\",\"outputs\":[{\"name\":\"_success\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"paidOut\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_proposalID\",\"type\":\"uint256\"},{\"name\":\"_newCurator\",\"type\":\"address\"}],\"name\":\"splitDAO\",\"outputs\":[{\"name\":\"_success\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DAOrewardAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"proposalDeposit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numberOfProposals\",\"outputs\":[{\"name\":\"_numberOfProposals\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastTimeMinQuorumMet\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_toMembers\",\"type\":\"bool\"}],\"name\":\"retrieveDAOReward\",\"outputs\":[{\"name\":\"_success\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"receiveEther\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isFueled\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenHolder\",\"type\":\"address\"}],\"name\":\"createTokenProxy\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_proposalID\",\"type\":\"uint256\"}],\"name\":\"getNewDAOAddress\",\"outputs\":[{\"name\":\"_newDAO\",\"type\":\"address\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_proposalID\",\"type\":\"uint256\"},{\"name\":\"_supportsProposal\",\"type\":\"bool\"}],\"name\":\"vote\",\"outputs\":[{\"name\":\"_voteID\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getMyReward\",\"outputs\":[{\"name\":\"_success\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewardToken\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFromWithoutReward\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_proposalDeposit\",\"type\":\"uint256\"}],\"name\":\"changeProposalDeposit\",\"outputs\":[],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"blocked\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"curator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_proposalID\",\"type\":\"uint256\"},{\"name\":\"_recipient\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_transactionData\",\"type\":\"bytes\"}],\"name\":\"checkProposalCode\",\"outputs\":[{\"name\":\"_codeChecksOut\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"privateCreation\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"type\":\"function\"},{\"inputs\":[{\"name\":\"_curator\",\"type\":\"address\"},{\"name\":\"_daoCreator\",\"type\":\"address\"},{\"name\":\"_proposalDeposit\",\"type\":\"uint256\"},{\"name\":\"_minTokensToCreate\",\"type\":\"uint256\"},{\"name\":\"_closingTime\",\"type\":\"uint256\"},{\"name\":\"_privateCreation\",\"type\":\"address\"}],\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"FuelingToDate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"CreatedToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Refund\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"proposalID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newCurator\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"description\",\"type\":\"string\"}],\"name\":\"ProposalAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"proposalID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"position\",\"type\":\"bool\"},{\"indexed\":true,\"name\":\"voter\",\"type\":\"address\"}],\"name\":\"Voted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"proposalID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"result\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"quorum\",\"type\":\"uint256\"}],\"name\":\"ProposalTallied\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_newCurator\",\"type\":\"address\"}],\"name\":\"NewCurator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_recipient\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_allowed\",\"type\":\"bool\"}],\"name\":\"AllowedRecipientChanged\",\"type\":\"event\"}]","ContractName":"DAO","CompilerVersion":"v0.3.1-2016-04-12-3ad5e82","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000da4a4626d3e16e094de3225a751aab7128e965260000000000000000000000004a574510c7014e4ae985403536074abe582adfc80000000000000000000000000000000000000000000000001bc16d674ec80000000000000000000000000000000000000000000000000a968163f0a57b4000000000000000000000000000000000000000000000000000000000000057495e100000000000000000000000000000000000000000000000000000000000000000","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}

-----------------------------------------------------------------------------------------------------------------------------------------------------------------
Group-x:       Contracts
Description-y: Get Contract Creator and Creation Tx Hash Returns a contract's deployer address and transaction hash it was created, up to 5 at a time. 
Endpoint-x:    https://api.etherscan.io/api?module=contract&action=getcontractcreation&contractaddresses=0xB83c27805aAcA5C7082eB45C868d955Cf04C337F,0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45,0xe4462eb568E2DFbb5b0cA2D3DbB1A35C9Aa98aad,0xdAC17F958D2ee523a2206206994597C13D831ec7,0xf5b969064b91869fBF676ecAbcCd1c5563F591d0&apikey=YourApiKeyToken 
Result:        {"status":"1","message":"OK","result":[{"contractAddress":"0x68b3465833fb72a70ecdf485e0e4c7bd8665fc45","contractCreator":"0x6c9fc64a53c1b71fb3f9af64d1ae3a4931a5f4e9","txHash":"0x7299cca7203f60a831756e043f4c2ccb0ee6cb7cf8aed8420f0ae99a16883a2b"},{"contractAddress":"0xb83c27805aaca5c7082eb45c868d955cf04c337f","contractCreator":"0x390dcfddebeff949b9862ec91d7be337b8995553","txHash":"0x0dbad4991b6727df606650635c9e632dad8a92c6363c91652307680efd336c6e"},{"contractAddress":"0xdac17f958d2ee523a2206206994597c13d831ec7","contractCreator":"0x36928500bc1dcd7af6a2b4008875cc336b927d57","txHash":"0x2f1c5c2b44f771e942a8506148e256f94f1a464babc938ae0690c6e34cd79190"},{"contractAddress":"0xe4462eb568e2dfbb5b0ca2d3dbb1a35c9aa98aad","contractCreator":"0xa6d3a33a1c66083859765b9d6e407d095a908193","txHash":"0x785bcd378c8168b63c9fdef64219f8ff69eec1f785f081a74513f21b18072f93"},{"contractAddress":"0xf5b969064b91869fbf676ecabccd1c5563f591d0","contractCreator":"0x435a5760aa360cae8c246039abab7754e80a1af1","txHash":"0x779cceffd0a5b4df6718674f7d88dda3edde9ff0a6fec271eb584f65a56997c6"}]}

-----------------------------------------------------------------------------------------------------------------------------------------------------------------
Group-x:       Contracts
Description-y: Verify Source Code Submits a contract source code to Etherscan for verification.
Endpoint-x:    Weird POST api

-----------------------------------------------------------------------------------------------------------------------------------------------------------------
Group-x:       Transactions
Description-y: Check Contract Execution Status Returns the status code of a contract execution.
Endpoint-x:    https://api.etherscan.io/api?module=transaction&action=getstatus&txhash=0x15f8e5ea1079d9a0bb04a4c58ae5fe7654b5b2b4463375ff7ffb490aa0032f3a&apikey=YourApiKeyToken
Result:        {"status":"1","message":"OK","result":{"isError":"1","errDescription":"Bad jump destination"}}

-----------------------------------------------------------------------------------------------------------------------------------------------------------------
Group-x:       Transactions
Description-y: Check Transaction Receipt Status Returns the status code of a transaction execution.
Endpoint-x:    https://api.etherscan.io/api?module=transaction&action=gettxreceiptstatus&txhash=0x513c1ba0bebf66436b5fed86ab668452b7805593c05073eb2d51d3a52f480a76&apikey=YourApiKeyToken
Result:        {"status":"1","message":"OK","result":{"status":"1"}}

-----------------------------------------------------------------------------------------------------------------------------------------------------------------
Group-x:       Blocks
Description-y: Get Block And Uncle Rewards by BlockNo Returns the block reward and 'Uncle' block rewards.
Endpoint-x:    https://api.etherscan.io/api?module=block&action=getblockreward&blockno=2165403&apikey=YourApiKeyToken
Result:        {"status":"1","message":"OK","result":{"blockNumber":"2165403","timeStamp":"1472533979","blockMiner":"0x13a06d3dfe21e0db5c016c03ea7d2509f7f8d1e3","blockReward":"5314181600000000000","uncles":[{"miner":"0xbcdfc35b86bedf72f0cda046a3c16829a2ef41d1","unclePosition":"0","blockreward":"3750000000000000000"},{"miner":"0x0d0c9855c722ff0c78f21e43aa275a5b8ea60dce","unclePosition":"1","blockreward":"3750000000000000000"}],"uncleInclusionReward":"312500000000000000"}}

-----------------------------------------------------------------------------------------------------------------------------------------------------------------
Group-x:       Blocks
Description-y: Get Estimated Block Countdown Time by BlockNo Returns the estimated time remaining, in seconds, until a certain block is mined.
Endpoint-x:    https://api.etherscan.io/api?module=block&action=getblockcountdown&blockno=16701588&apikey=YourApiKeyToken
Result:        {"status":"1","message":"OK","result":{"CurrentBlock":"12715477","CountdownBlock":"16701588","RemainingBlock":"3986111","EstimateTimeInSec":"52616680.2"}}

-----------------------------------------------------------------------------------------------------------------------------------------------------------------
Group-x:       Blocks
Description-y: Get Block Number by Timestamp Returns the block number that was mined at a certain timestamp.
Endpoint-x:    https://api.etherscan.io/api?module=block&action=getblocknobytime&timestamp=1578638524&closest=before&apikey=YourApiKeyToken
Result:        {"status":"1","message":"OK","result":"12712551"}

-----------------------------------------------------------------------------------------------------------------------------------------------------------------
Group-x:       Blocks
Description-y: Get Daily Average Block Size ​ Returns the daily average block size within a date range.
Endpoint-x:    https://api.etherscan.io/api?module=stats&action=dailyavgblocksize&startdate=2019-02-01&enddate=2019-02-28&sort=asc&apikey=YourApiKeyToken
Result:        {"status":"1","message":"OK","result":[{"UTCDate":"2019-02-01","unixTimeStamp":"1548979200","blockSize_bytes":20373},{"UTCDate":"2019-02-28","unixTimeStamp":"1551312000","blockSize_bytes":25117}]}

-----------------------------------------------------------------------------------------------------------------------------------------------------------------
Group-x:       Blocks
Description-y: Get Daily Block Count and Rewards ​ Returns the number of blocks mined daily and the amount of block rewards.
Endpoint-x:    https://api.etherscan.io/api?module=stats&action=dailyblkcount&startdate=2019-02-01&enddate=2019-02-28&sort=asc&apikey=YourApiKeyToken 
Result:        {"status":"1","message":"OK","result":[{"UTCDate":"2019-02-01","unixTimeStamp":"1548979200","blockCount":4848,"blockRewards_Eth":"14929.464690870590355682"},{"UTCDate":"2019-02-28","unixTimeStamp":"1551312000","blockCount":4366,"blockRewards_Eth":"12808.485512162356907132"}]}

-----------------------------------------------------------------------------------------------------------------------------------------------------------------
Group-x:       Blocks
Description-y: Get Daily Block Rewards ​ Returns the amount of block rewards distributed to miners daily.
Endpoint-x:    https://api.etherscan.io/api?module=stats&action=dailyblockrewards&startdate=2019-02-01&enddate=2019-02-28&sort=asc&apikey=YourApiKeyToken 
Result:        {"status":"1","message":"OK","result":[{"UTCDate":"2019-02-01","unixTimeStamp":"1548979200","blockRewards_Eth":"15300.65625"},{"UTCDate":"2019-02-28","unixTimeStamp":"1551312000","blockRewards_Eth":"12954.84375"}]}

-----------------------------------------------------------------------------------------------------------------------------------------------------------------
Group-x:       Blocks
Description-y: Get Daily Average Time for A Block to be Included in the Ethereum Blockchain ​Returns the daily average of time needed for a block to be successfully mined.
Endpoint-x:    https://api.etherscan.io/api?module=stats&action=dailyavgblocktime&startdate=2019-02-01&enddate=2019-02-28&sort=asc&apikey=YourApiKeyToken 
Result:        {"status":"1","message":"OK","result":[{"UTCDate":"2019-02-01","unixTimeStamp":"1548979200","blockTime_sec":"17.67"},{"UTCDate":"2019-02-28","unixTimeStamp":"1551312000","blockTime_sec":"19.61"}]}

-----------------------------------------------------------------------------------------------------------------------------------------------------------------
Group-x:       Blocks
Description-y: Get Daily Uncle Block Count and Rewards ​Returns the number of 'Uncle' blocks mined daily and the amount of 'Uncle' block rewards.
Endpoint-x:    https://api.etherscan.io/api?module=stats&action=dailyuncleblkcount&startdate=2019-02-01&enddate=2019-02-28&sort=asc&apikey=YourApiKeyToken 
Result:        {"status":"1","message":"OK","result":[{"UTCDate":"2019-02-01","unixTimeStamp":"1548979200","uncleBlockCount":287,"uncleBlockRewards_Eth":"729.75"},{"UTCDate":"2019-02-28","unixTimeStamp":"1551312000","uncleBlockCount":288,"uncleBlockRewards_Eth":"691.5"}]}

-----------------------------------------------------------------------------------------------------------------------------------------------------------------
Group-x:       Logs
Description-y: Get Event Logs by Address Returns the event logs from an address, with optional filtering by block range.
Endpoint-x:    https://api.etherscan.io/api?module=logs&action=getLogs&address=0xbd3531da5cf5857e7cfaa92426877b022e612cf8&fromBlock=12878196&toBlock=12878196&page=1&offset=1000&apikey=YourApiKeyToken
Result:        {"status":"1","message":"OK","result":[{"address":"0xbd3531da5cf5857e7cfaa92426877b022e612cf8","topics":["0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef","0x0000000000000000000000000000000000000000000000000000000000000000","0x000000000000000000000000c45a4b3b698f21f88687548e7f5a80df8b99d93d","0x00000000000000000000000000000000000000000000000000000000000000b5"],"data":"0x","blockNumber":"0xc48174","timeStamp":"0x60f9ce56","gasPrice":"0x2e90edd000","gasUsed":"0x247205","logIndex":"0x","transactionHash":"0x4ffd22d986913d33927a392fe4319bcd2b62f3afe1c15a2c59f77fc2cc4c20a9","transactionIndex":"0x"},{"address":"0xbd3531da5cf5857e7cfaa92426877b022e612cf8","topics":["0x645f26e653c951cec836533f8fe0616d301c20a17153debc17d7c3dbe4f32b28","0x00000000000000000000000000000000000000000000000000000000000000b5"],"data":"0x","blockNumber":"0xc48174","timeStamp":"0x60f9ce56","gasPrice":"0x2e90edd000","gasUsed":"0x247205","logIndex":"0x1","transactionHash":"0x4ffd22d986913d33927a392fe4319bcd2b62f3afe1c15a2c59f77fc2cc4c20a9","transactionIndex":"0x"}]}

-----------------------------------------------------------------------------------------------------------------------------------------------------------------
Group-x:       Logs
Description-y: Get Event Logs by Topics Returns the events log in a block range, filtered by topics. 
Endpoint-x:    https://api.etherscan.io/api?module=logs&action=getLogs&fromBlock=12878196&toBlock=12879196&topic0=0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef&topic0_1_opr=and&topic1=0x0000000000000000000000000000000000000000000000000000000000000000&page=1&offset=1000&apikey=YourApiKeyToken
Result:        {"status":"1","message":"OK","result":[{"address":"0xbd3531da5cf5857e7cfaa92426877b022e612cf8","topics":["0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef","0x0000000000000000000000000000000000000000000000000000000000000000","0x000000000000000000000000c45a4b3b698f21f88687548e7f5a80df8b99d93d","0x00000000000000000000000000000000000000000000000000000000000000b5"],"data":"0x","blockNumber":"0xc48174","timeStamp":"0x60f9ce56","gasPrice":"0x2e90edd000","gasUsed":"0x247205","logIndex":"0x","transactionHash":"0x4ffd22d986913d33927a392fe4319bcd2b62f3afe1c15a2c59f77fc2cc4c20a9","transactionIndex":"0x"},{"address":"0xbd3531da5cf5857e7cfaa92426877b022e612cf8","topics":["0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef","0x0000000000000000000000000000000000000000000000000000000000000000","0x000000000000000000000000c45a4b3b698f21f88687548e7f5a80df8b99d93d","0x00000000000000000000000000000000000000000000000000000000000000b6"],"data":"0x","blockNumber":"0xc48174","timeStamp":"0x60f9ce56","gasPrice":"0x2e90edd000","gasUsed":"0x247205","logIndex":"0x2","transactionHash":"0x4ffd22d986913d33927a392fe4319bcd2b62f3afe1c15a2c59f77fc2cc4c20a9","transactionIndex":"0x"}]}

-----------------------------------------------------------------------------------------------------------------------------------------------------------------
Group-x:       Logs
Description-y: Get Event Logs by Address filtered by Topics Returns the event logs from an address, filtered by topics and block range.
Endpoint-x:    https://api.etherscan.io/api?module=logs&action=getLogs&fromBlock=15073139&toBlock=15074139&address=0x59728544b08ab483533076417fbbb2fd0b17ce3a&topic0=0x27c4f0403323142b599832f26acd21c74a9e5b809f2215726e244a4ac588cd7d&topic0_1_opr=and&topic1=0x00000000000000000000000023581767a106ae21c074b2276d25e5c3e136a68b&page=1&offset=1000&apikey=YourApiKeyToken
Result:        {"status":"1","message":"OK","result":[{"address":"0x59728544b08ab483533076417fbbb2fd0b17ce3a","topics":["0x27c4f0403323142b599832f26acd21c74a9e5b809f2215726e244a4ac588cd7d","0x00000000000000000000000023581767a106ae21c074b2276d25e5c3e136a68b","0x000000000000000000000000000000000000000000000000000000000000236d","0x000000000000000000000000c8a5592031f93debea5d9e67a396944ee01bb2ca"],"data":"0x000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc20000000000000000000000000000000000000000000000000f207539952d0000","blockNumber":"0xe60262","timeStamp":"0x62c26caf","gasPrice":"0x5e2d742c9","gasUsed":"0xfb7f8","logIndex":"0x4b","transactionHash":"0x26fe1a0a403fd44ef11ee72f3b4ceff590b6ea533684cb279cb4242be463304c","transactionIndex":"0x39"},{"address":"0x59728544b08ab483533076417fbbb2fd0b17ce3a","topics":["0x27c4f0403323142b599832f26acd21c74a9e5b809f2215726e244a4ac588cd7d","0x00000000000000000000000023581767a106ae21c074b2276d25e5c3e136a68b","0x0000000000000000000000000000000000000000000000000000000000002261","0x000000000000000000000000c8a5592031f93debea5d9e67a396944ee01bb2ca"],"data":"0x000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc20000000000000000000000000000000000000000000000000de0b6b3a7640000","blockNumber":"0xe6035b","timeStamp":"0x62c27ab1","gasPrice":"0x27e523173","gasUsed":"0x3b86e","logIndex":"0x1d7","transactionHash":"0x3a299413cf2c91e376e542efcf3fc308c562da79af6e992401217cc6208c7f74","transactionIndex":"0x92"}]}

-----------------------------------------------------------------------------------------------------------------------------------------------------------------
Group-x:       Geth/Parity Proxy
Description-y: eth_blockNumber Returns the number of most recent block
Endpoint-x:    https://api.etherscan.io/api?module=proxy&action=eth_blockNumber&apikey=YourApiKeyToken
Result:        {"jsonrpc":"2.0","id":83,"result":"0xc36b29"}

-----------------------------------------------------------------------------------------------------------------------------------------------------------------
Group-x:       Geth/Parity Proxy
Description-y: eth_getBlockByNumber Returns information about a block by block number.
Endpoint-x:    https://api.etherscan.io/api?module=proxy&action=eth_getBlockByNumber&tag=0x10d4f&boolean=true&apikey=YourApiKeyToken
Result:        {"jsonrpc":"2.0","id":1,"result":{"baseFeePerGas":"0x5cfe76044","difficulty":"0x1b4ac252b8a531","extraData":"0xd883010a06846765746888676f312e31362e36856c696e7578","gasLimit":"0x1caa87b","gasUsed":"0x5f036a","hash":"0x396288e0ad6690159d56b5502a172d54baea649698b4d7af2393cf5d98bf1bb3","logsBloom":"0x5020418e211832c600000411c00098852850124700800500580d406984009104010420410c00420080414b044000012202448082084560844400d00002202b1209122000812091288804302910a246e25380282000e00002c00050009038cc205a018180028225218760100040820ac12302840050180448420420b000080000410448288400e0a2c2402050004024a240200415016c105844214060005009820302001420402003200452808508401014690208808409000033264a1b0d200c1200020280000cc0220090a8000801c00b0100a1040a8110420111870000250a22dc210a1a2002409c54140800c9804304b408053112804062088bd700900120","miner":"0x5a0b54d5dc17e0aadc383d2db43b0a0d3e029c4c","mixHash":"0xc547c797fb85c788ecfd4f5d24651bddf15805acbaad2c74b96b0b2a2317e66c","nonce":"0x04a99df972bd8412","number":"0xc63251","parentHash":"0xbb2d43395f93dab5c424421be22d874f8c677e3f466dc993c218fa2cd90ef120","receiptsRoot":"0x3de3b59d208e0fd441b6a2b3b1c814a2929f5a2d3016716465d320b4d48cc1e5","sha3Uncles":"0xee2e81479a983dd3d583ab89ec7098f809f74485e3849afb58c2ea8e64dd0930","size":"0x6cb6","stateRoot":"0x60fdb78b92f0e621049e0aed52957971e226a11337f633856d8b953a56399510","timestamp":"0x6110bab2","totalDifficulty":"0x612789b0aba90e580f8","transactions":["0x40330c87750aa1ba1908a787b9a42d0828e53d73100ef61ae8a4d925329587b5","0x6fa2208790f1154b81fc805dd7565679d8a8cc26112812ba1767e1af44c35dd4","0xe31d8a1f28d4ba5a794e877d65f83032e3393809686f53fa805383ab5c2d3a3c","0xa6a83df3ca7b01c5138ec05be48ff52c7293ba60c839daa55613f6f1c41fdace","0x4e46edeb68a62dde4ed081fae5efffc1fb5f84957b5b3b558cdf2aa5c2621e17","0x356ee444241ae2bb4ce9f77cdbf98cda9ffd6da244217f55465716300c425e82","0x1a4ec2019a3f8b1934069fceff431e1370dcc13f7b2561fe0550cc50ab5f4bbc","0xad7994bc966aed17be5d0b6252babef3f56e0b3f35833e9ac414b45ed80dac93"],"transactionsRoot":"0xaceb14fcf363e67d6cdcec0d7808091b764b4428f5fd7e25fb18d222898ef779","uncles":["0x9e8622c7bf742bdeaf96c700c07151c1203edaf17a38ea8315b658c2e6d873cd"]}}

-----------------------------------------------------------------------------------------------------------------------------------------------------------------
Group-x:       Geth/Parity Proxy
Description-y: eth_getUncleByBlockNumberAndIndex Returns information about a uncle by block number.
Endpoint-x:    https://api.etherscan.io/api?module=proxy&action=eth_getUncleByBlockNumberAndIndex&tag=0xC63276&index=0x0&apikey=YourApiKeyToken
Result:        {"jsonrpc":"2.0","id":1,"result":{"baseFeePerGas":"0x65a42b13c","difficulty":"0x1b1457a8247bbb","extraData":"0x486976656f6e2063612d68656176792059476f6e","gasLimit":"0x1ca359a","gasUsed":"0xb48fe1","hash":"0x1da88e3581315d009f1cb600bf06f509cd27a68cb3d6437bda8698d04089f14a","logsBloom":"0xf1a360ca505cdda510d810c1c81a03b51a8a508ed601811084833072945290235c8721e012182e40d57df552cf00f1f01bc498018da19e008681832b43762a30c26e11709948a9b96883a42ad02568e3fcc3000004ee12813e4296498261619992c40e22e60bd95107c5bd8462fcca570a0095d52a4c24720b00f13a2c3d62aca81e852017470c109643b15041fd69742406083d67654fc841a18b405ab380e06a8c14c0138b6602ea8f48b2cd90ac88c3478212011136802900264718a085047810221225080dfb2c214010091a6f233883bb0084fa1c197330a10bb0006686e678b80e50e4328000041c218d1458880181281765d28d51066058f3f80a7822","miner":"0x1ad91ee08f21be3de0ba2ba6918e714da6b45836","mixHash":"0xa8e1dbbf073614c7ed05f44b9e92fbdb3e1d52575ed8167fa57f934210bbb0a2","nonce":"0x28cc3e5b7bee9866","number":"0xc63274","parentHash":"0x496dae3e722efdd9ee1eb69499bdc7ed0dca54e13cd1157a42811c442f01941f","receiptsRoot":"0x9c9a7a99b4af7607691a7f2a50d474290385c0a6f39c391131ea0c67307213f4","sha3Uncles":"0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347","size":"0x224","stateRoot":"0xde9a11f0ee321390c1a7843cab7b9ffd3779d438bc8f77de4361dfe2807d7dee","timestamp":"0x6110bd1a","transactionsRoot":"0xa04a79e531db3ec373cb63e9ebfbc9c95525de6347958918a273675d4f221575","uncles":[]}}

-----------------------------------------------------------------------------------------------------------------------------------------------------------------
Group-x:       Geth/Parity Proxy
Description-y: eth_getBlockTransactionCountByNumber Returns the number of transactions in a block.
Endpoint-x:    https://api.etherscan.io/api?module=proxy&action=eth_getBlockTransactionCountByNumber&tag=0x10FB78&apikey=YourApiKeyToken
Result:        {"jsonrpc":"2.0","id":1,"result":"0x3"}

-----------------------------------------------------------------------------------------------------------------------------------------------------------------
Group-x:       Geth/Parity Proxy
Description-y: eth_getTransactionByHash Returns the information about a transaction requested by transaction hash.
Endpoint-x:    https://api.etherscan.io/api?module=proxy&action=eth_getTransactionByHash&txhash=0xbc78ab8a9e9a0bca7d0321a27b2c03addeae08ba81ea98b03cd3dd237eabed44&apikey=YourApiKeyToken
Result:        {"jsonrpc":"2.0","id":1,"result":{"blockHash":"0xf850331061196b8f2b67e1f43aaa9e69504c059d3d3fb9547b04f9ed4d141ab7","blockNumber":"0xcf2420","from":"0x00192fb10df37c9fb26829eb2cc623cd1bf599e8","gas":"0x5208","gasPrice":"0x19f017ef49","maxFeePerGas":"0x1f6ea08600","maxPriorityFeePerGas":"0x3b9aca00","hash":"0xbc78ab8a9e9a0bca7d0321a27b2c03addeae08ba81ea98b03cd3dd237eabed44","input":"0x","nonce":"0x33b79d","to":"0xc67f4e626ee4d3f272c2fb31bad60761ab55ed9f","transactionIndex":"0x5b","value":"0x19755d4ce12c00","type":"0x2","accessList":[],"chainId":"0x1","v":"0x0","r":"0xa681faea68ff81d191169010888bbbe90ec3eb903e31b0572cd34f13dae281b9","s":"0x3f59b0fa5ce6cf38aff2cfeb68e7a503ceda2a72b4442c7e2844d63544383e3"}}

-----------------------------------------------------------------------------------------------------------------------------------------------------------------
Group-x:       Geth/Parity Proxy
Description-y: eth_getTransactionByBlockNumberAndIndex Returns information about a transaction by block number and transaction index position.
Endpoint-x:    https://api.etherscan.io/api?module=proxy&action=eth_getTransactionByBlockNumberAndIndex&tag=0xC6331D&index=0x11A&apikey=YourApiKeyToken
Result:        {"jsonrpc":"2.0","result":{"accessList":[],"blockHash":"0xdce94191f861842c2786e3594da0c0109707fd78409cab5f38e10eb87d0f301c","blockNumber":"0xa36e44","chainId":"0x3","condition":null,"creates":null,"from":"0xb910ae1db14a9fbc64ce175bdca6d3a743f690ab","gas":"0x186a0","gasPrice":"0x3b9aca09","hash":"0xf96ff62ba5aaf46cd824b6766f7fa6f6b9595b1dd4ef1d31bcf1f765047c2835","input":"0xd0e30db0","maxFeePerGas":"0x3b9aca12","maxPriorityFeePerGas":"0x3b9aca00","nonce":"0xc6","publicKey":"0x6dbf7068e19de8457c426a758a92ea54827ebd5b8467c3a1a5c4ac19bc7570457738fe496a40ea4e1f59d39d89636a430afdec0bf2a8060c6bf7d612bfe90ad3","r":"0xdecdc48821a06bf116e82b355d520dc5a44d6df98234e5344c16565b0b3dfdba","raw":"0x02f8750381c6843b9aca00843b9aca12830186a094c778417e063141139fce010982780140aa0cd5ab8502540be40084d0e30db0c001a0decdc48821a06bf116e82b355d520dc5a44d6df98234e5344c16565b0b3dfdbaa06b85bb6fd8153e86b50f0011787585e8c709a2a25e7ee3c2579572f07acfd42e","s":"0x6b85bb6fd8153e86b50f0011787585e8c709a2a25e7ee3c2579572f07acfd42e","to":"0xc778417e063141139fce010982780140aa0cd5ab","transactionIndex":"0xd","type":"0x2","v":"0x1","value":"0x2540be400"},"id":1}

-----------------------------------------------------------------------------------------------------------------------------------------------------------------
Group-x:       Geth/Parity Proxy
Description-y: eth_getTransactionCount Returns the number of transactions performed by an address.
Endpoint-x:    https://api.etherscan.io/api?module=proxy&action=eth_getTransactionCount&address=0x4bd5900Cb274ef15b153066D736bf3e83A9ba44e&tag=latest&apikey=YourApiKeyToken
Result:        {"jsonrpc":"2.0","id":1,"result":"0x44"}

-----------------------------------------------------------------------------------------------------------------------------------------------------------------
Group-x:       Geth/Parity Proxy
Description-y: eth_sendRawTransaction Submits a pre-signed transaction for broadcast to the Ethereum network.
Endpoint-x:    https://api.etherscan.io/api?module=proxy&action=eth_sendRawTransaction&hex=0xf904808000831cfde080&apikey=YourApiKeyToken
Result:        {"id":1,"jsonrpc": "2.0","result": "0xe670ec64341771606e55d6b4ca35a1a6b75ee3d5145a99d05921026d1527331"}
​
----------------------------------------------------------------------------------------------------------------------------------------------------------------
Group-x:       Geth/Parity Proxy
Description-y: eth_getTransactionReceipt Returns the receipt of a transaction by transaction hash.
Endpoint-x:    https://api.etherscan.io/api?module=proxy&action=eth_getTransactionReceipt&txhash=0xadb8aec59e80db99811ac4a0235efa3e45da32928bcff557998552250fa672eb&apikey=YourApiKeyToken
Result:        {"jsonrpc":"2.0","id":1,"result":{"blockHash":"0x07c17710dbb7514e92341c9f83b4aab700c5dba7c4fb98caadd7926a32e47799","blockNumber":"0xcf2427","contractAddress":null,"cumulativeGasUsed":"0xeb67d5","effectiveGasPrice":"0x1a96b24c26","from":"0x292f04a44506c2fd49bac032e1ca148c35a478c8","gasUsed":"0xb41d","logs":[{"address":"0xdac17f958d2ee523a2206206994597c13d831ec7","topics":["0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef","0x000000000000000000000000292f04a44506c2fd49bac032e1ca148c35a478c8","0x000000000000000000000000ab6960a6511ff18ed8b8c012cb91c7f637947fc0"],"data":"0x00000000000000000000000000000000000000000000000000000000013f81a6","blockNumber":"0xcf2427","transactionHash":"0xadb8aec59e80db99811ac4a0235efa3e45da32928bcff557998552250fa672eb","transactionIndex":"0x122","blockHash":"0x07c17710dbb7514e92341c9f83b4aab700c5dba7c4fb98caadd7926a32e47799","logIndex":"0xdb","removed":false}],"logsBloom":"0xstatus":"0x1","to":"0xdac17f958d2ee523a2206206994597c13d831ec7","transactionHash":"0xadb8aec59e80db99811ac4a0235efa3e45da32928bcff557998552250fa672eb","transactionIndex":"0x122","type":"0x2"}}

-----------------------------------------------------------------------------------------------------------------------------------------------------------------
Group-x:       Geth/Parity Proxy
Description-y: eth_call Executes a new message call immediately without creating a transaction on the block chain.
Endpoint-x:    https://api.etherscan.io/api?module=proxy&action=eth_call&to=0xAEEF46DB4855E25702F8237E8f403FddcaF931C0&data=0x70a08231000000000000000000000000e16359506c028e51f16be38986ec5746251e9724&tag=latest&apikey=YourApiKeyToken
Result:        {"jsonrpc":"2.0","id":1,"result":"0x00000000000000000000000000000000000000000000000000601d8888141c00"}

-----------------------------------------------------------------------------------------------------------------------------------------------------------------
Group-x:       Geth/Parity Proxy
Description-y: eth_getCodeReturns code at a given address.
Endpoint-x:    https://api.etherscan.io/api?module=proxy&action=eth_getCode&address=0xf75e354c5edc8efed9b59ee9f67a80845ade7d0c&tag=latest&apikey=YourApiKeyToken
Result:        {"jsonrpc":"2.0","id":1,"result":"0x3660008037602060003660003473273930d21e01ee25e4c219b63259d214872220a261235a5a03f21560015760206000f3"}

-----------------------------------------------------------------------------------------------------------------------------------------------------------------
Group-x:       Geth/Parity Proxy
Description-y: eth_getStorageAt Returns the value from a storage position at a given address.
Endpoint-x:    https://api.etherscan.io/api?module=proxy&action=eth_getStorageAt&address=0x6e03d9cce9d60f3e9f2597e13cd4c54c55330cfd&position=0x0&tag=latest&apikey=YourApiKeyToken
Result:        {"jsonrpc":"2.0","id":1,"result":"0x0000000000000000000000003d0768da09ce77d25e2d998e6a7b6ed4b9116c2d"}

-----------------------------------------------------------------------------------------------------------------------------------------------------------------
Group-x:       Geth/Parity Proxy
Description-y: eth_gasPrice Returns the current price per gas in wei.
Endpoint-x:    https://api.etherscan.io/api?module=proxy&action=eth_gasPrice&apikey=YourApiKeyToken
Result:        {"jsonrpc":"2.0","id":73,"result":"0x430e23400"}
​
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
Group-x:       Geth/Parity Proxy
Description-y: eth_estimateGas Makes a call or transaction, which won't be added to the blockchain and returns the used gas.
Endpoint-x:    https://api.etherscan.io/api?module=proxy&action=eth_estimateGas&data=0x4e71d92d&to=0xf0160428a8552ac9bb7e050d90eeade4ddd52843&value=0xff22&gasPrice=0x51da038cc&gas=0x5f5e0ff&apikey=YourApiKeyToken
Result:        {"jsonrpc":"2.0","id":1,"result":"0x6556"}

-----------------------------------------------------------------------------------------------------------------------------------------------------------------
Group-x:       Tokens
Description-y: Get ERC20-Token TotalSupply by ContractAddress Returns the current amount of an ERC-20 token in circulation.
Endpoint-x:    https://api.etherscan.io/api?module=stats&action=tokensupply&contractaddress=0x57d90b64a1a57749b0f932f1a3395792e12e7055&apikey=YourApiKeyToken
Result:        {"status":"1","message":"OK","result":"21265524714464"}

-----------------------------------------------------------------------------------------------------------------------------------------------------------------
Group-x:       Tokens
Description-y: Get ERC20-Token Account Balance for TokenContractAddress Returns the current balance of an ERC-20 token of an address.
Endpoint-x:    https://api.etherscan.io/api?module=account&action=tokenbalance&contractaddress=0x57d90b64a1a57749b0f932f1a3395792e12e7055&address=0xe04f27eb70e025b78871a2ad7eabe85e61212761&tag=latest&apikey=YourApiKeyToken
Result:        {"status":"1","message":"OK","result":"135499"}

-----------------------------------------------------------------------------------------------------------------------------------------------------------------
Group-x:       Tokens
Description-y: Get Historical ERC20-Token TotalSupply by ContractAddress & BlockNo ​ Returns the amount of an ERC-20 token in circulation at a certain block height.
​Endpoint-x:    https://api.etherscan.io/api?module=stats&action=tokensupplyhistory&contractaddress=0x57d90b64a1a57749b0f932f1a3395792e12e7055&blockno=8000000&apikey=YourApiKeyToken 
Result:        {"status":"1","message":"OK","result":"21265524714464"}
​

-----------------------------------------------------------------------------------------------------------------------------------------------------------------
Group-x:       Tokens
Description-y: Get Historical ERC20-Token Account Balance for TokenContractAddress by BlockNo ​Returns the balance of an ERC-20 token of an address at a certain block height.
Endpoint-x:    https://api.etherscan.io/api?module=account&action=tokenbalancehistory&contractaddress=0x57d90b64a1a57749b0f932f1a3395792e12e7055&address=0xe04f27eb70e025b78871a2ad7eabe85e61212761&blockno=8000000&apikey=YourApiKeyToken 
Result:        {"status":"1","message":"OK","result":"135499"}
​

-----------------------------------------------------------------------------------------------------------------------------------------------------------------
Group-x:       Tokens
Description-y: Get Token Holder List by Contract Address ​Return the current ERC20 token holders and number of tokens held.
Endpoint-x:    https://api.etherscan.io/api?module=token&action=tokenholderlist&contractaddress=0xaaaebe6fe48e54f431b0c390cfaf0b017d09d42d&page=1&offset=10&apikey=YourApiKeyToken 
Result:        {"status":"1","message":"OK","result":[{"TokenHolderAddress":"0x0000000000000000000000000000000000000000","TokenHolderQuantity":"34956"},{"TokenHolderAddress":"0x000000000000084e91743124a982076c59f10084","TokenHolderQuantity":"1"},{"TokenHolderAddress":"0x0000000000000d9054f605ca65a2647c2b521422","TokenHolderQuantity":"10000000"},{"TokenHolderAddress":"0x0000000000002d534ff79e9c69e7fcc742f0be83","TokenHolderQuantity":"5"},{"TokenHolderAddress":"0x0000000000003f5e74c1ba8a66b48e6f3d71ae82","TokenHolderQuantity":"1"}]}

-----------------------------------------------------------------------------------------------------------------------------------------------------------------
Group-x:       Tokens
Description-y: Get Token Info by ContractAddress ​Returns project information and social media links of an ERC20/ERC721/ERC1155 token.
Endpoint-x:    https://api.etherscan.io/api?module=token&action=tokeninfo&contractaddress=0x0e3a2a1f2146d86a604adc220b4967a898d7fe07&apikey=YourApiKeyToken 
Result:        {"status":"1","message":"OK","result":[{"contractAddress":"0x0e3a2a1f2146d86a604adc220b4967a898d7fe07","tokenName":"Gods Unchained Cards","symbol":"CARD","divisor":"0","tokenType":"ERC721","totalSupply":"6962498","blueCheckmark":"true","description":"A TCG on the Ethereum blockchain that uses NFT's to bring real ownership to in-game assets.","website":"https://godsunchained.com/","email":"","blog":"https://medium.com/@fuelgames","reddit":"https://www.reddit.com/r/GodsUnchained/","slack":"","facebook":"https://www.facebook.com/godsunchained/","twitter":"https://twitter.com/godsunchained","bitcointalk":"","github":"","telegram":"","wechat":"","linkedin":"","discord":"https://discordapp.com/invite/DKGr2pW","whitepaper":"","tokenPriceUSD":"0.000000000000000000"}]}

-----------------------------------------------------------------------------------------------------------------------------------------------------------------
Group-x:       Tokens
Description-y: Get Address ERC20 Token Holding ​Returns the ERC-20 tokens and amount held by an address.
Endpoint-x:    https://api.etherscan.io/api?module=account&action=addresstokenbalance&address=0x983e3660c0bE01991785F80f266A84B911ab59b0&page=1&offset=100&apikey=YourApiKeyToken
Result:        {"status":"1","message":"OK","result":[{"TokenAddress":"0xffffffff2ba8f66d4e51811c5190992176930278","TokenName":"Furucombo","TokenSymbol":"COMBO","TokenQuantity":"1861606940000000000","TokenDivisor":"18"},{"TokenAddress":"0x53a1e9912323b8016424d6287286e3b6de263f76","TokenName":"PUTIN Token","TokenSymbol":"PTT","TokenQuantity":"3500000000000000000000","TokenDivisor":"18"},{"TokenAddress":"0xb753428af26e81097e7fd17f40c88aaa3e04902c","TokenName":"Spice","TokenSymbol":"SFI","TokenQuantity":"7","TokenDivisor":"18"},{"TokenAddress":"0x1b40183efb4dd766f11bda7a7c3ad8982e998421","TokenName":"VesperToken","TokenSymbol":"VSP","TokenQuantity":"962","TokenDivisor":"18"},{"TokenAddress":"0x37e83a94c6b1bdb816b59ac71dd02cf154d8111f","TokenName":"PhotoChromic","TokenSymbol":"PHCR","TokenQuantity":"4608452961264910063288","TokenDivisor":"18"}]}

-----------------------------------------------------------------------------------------------------------------------------------------------------------------
Group-x:       Tokens
Description-y: Get Address ERC721 Token Holding ​Returns the ERC-721 tokens and amount held by an address. 
Endpoint-x:    https://api.etherscan.io/api?module=account&action=addresstokennftbalance&address=0x6b52e83941eb10f9c613c395a834457559a80114&page=1&offset=100&apikey=YourApiKeyToken 
Result:        {"status":"1","message":"OK","result":[{"TokenAddress":"0x49cf6f5d44e70224e2e23fdcdd2c053f30ada28b","TokenName":"CloneX","TokenSymbol":"CloneX","TokenQuantity":"52"},{"TokenAddress":"0xbc4ca0eda7647a8ab7c2061c2e118a18a936f13d","TokenName":"BoredApeYachtClub","TokenSymbol":"BAYC","TokenQuantity":"1"},{"TokenAddress":"0x60e4d786628fea6478f785a6d7e704777c86a7c6","TokenName":"MutantApeYachtClub","TokenSymbol":"MAYC","TokenQuantity":"1"},{"TokenAddress":"0xed5af388653567af2f388e6224dc7c4b3241c544","TokenName":"Azuki","TokenSymbol":"AZUKI","TokenQuantity":"1"},{"TokenAddress":"0x7bd29408f11d2bfc23c34f18275bbf23bb716bc7","TokenName":"Meebits","TokenSymbol":"⚇","TokenQuantity":"1"}]}

-----------------------------------------------------------------------------------------------------------------------------------------------------------------
Group-x:       Tokens
Description-y: Get Address ERC721 Token Inventory By Contract Address ​Returns the ERC-721 token inventory of an address, filtered by contract address. 
Endpoint-x:    https://api.etherscan.io/api?module=account&action=addresstokennftinventory&address=0x123432244443b54409430979df8333f9308a6040&contractaddress=0xed5af388653567af2f388e6224dc7c4b3241c544&page=1&offset=100&apikey=YourApiKeyToken
Result:        {"status":"1","message":"OK","result":[{"TokenAddress":"0xed5af388653567af2f388e6224dc7c4b3241c544","TokenId":"5401"},{"TokenAddress":"0xed5af388653567af2f388e6224dc7c4b3241c544","TokenId":"7411"},{"TokenAddress":"0xed5af388653567af2f388e6224dc7c4b3241c544","TokenId":"453"},{"TokenAddress":"0xed5af388653567af2f388e6224dc7c4b3241c544","TokenId":"8080"},{"TokenAddress":"0xed5af388653567af2f388e6224dc7c4b3241c544","TokenId":"4255"}]}

-----------------------------------------------------------------------------------------------------------------------------------------------------------------
Group-x:       Gas Tracker
Description-y: Get Estimation of Confirmation Time Returns the estimated time, in seconds, for a transaction to be confirmed on the blockchain.
Endpoint-x:    https://api.etherscan.io/api?module=gastracker&action=gasestimate&gasprice=2000000000&apikey=YourApiKeyToken
Result:        {"status":"1","message":"OK","result":"9227"}
​
Group-x:       Gas Tracker
Description-y: Get Gas Oracle Returns the current Safe, Proposed and Fast gas prices.
Endpoint-x:    https://api.etherscan.io/api?module=gastracker&action=gasoracle&apikey=YourApiKeyToken 
Result:        {"status":"1","message":"OK","result":{"LastBlock":"13053741","SafeGasPrice":"20","ProposeGasPrice":"22","FastGasPrice":"24","suggestBaseFee":"19.230609716","gasUsedRatio":"0.370119078777807,0.8954731,0.550911766666667,0.212457033333333,0.552463633333333"}}
​

-----------------------------------------------------------------------------------------------------------------------------------------------------------------
Group-x:       Gas Tracker
Description-y: Get Daily Average Gas Limit ​Returns the historical daily average gas limit of the Ethereum network.
Endpoint-x:    https://api.etherscan.io/api?module=stats&action=dailyavggaslimit&startdate=2019-02-01&enddate=2019-02-28&sort=asc&apikey=YourApiKeyToken 
Result:        {"status":"1","message":"OK","result":[{"UTCDate":"2019-02-01","unixTimeStamp":"1548979200","gasLimit":"8001360"},{"UTCDate":"2019-02-27","unixTimeStamp":"1551225600","gasLimit":"8001071"},{"UTCDate":"2019-02-28","unixTimeStamp":"1551312000","gasLimit":"8001137"}]}

-----------------------------------------------------------------------------------------------------------------------------------------------------------------
Group-x:       Gas Tracker
Description-y: Get Ethereum Daily Total Gas Used​ Returns the total amount of gas used daily for transctions on the Ethereum network.
Endpoint-x:    https://api.etherscan.io/api?module=stats&action=dailygasused&startdate=2019-02-01&enddate=2019-02-28&sort=asc&apikey=YourApiKeyToken 
Result:        {"status":"1","message":"OK","result":[{"UTCDate":"2019-02-01","unixTimeStamp":"1548979200","gasUsed":"32761450415"},{"UTCDate":"2019-02-27","unixTimeStamp":"1551225600","gasUsed":"32657440136"},{"UTCDate":"2019-02-28","unixTimeStamp":"1551312000","gasUsed":"33081119561"}]}

-----------------------------------------------------------------------------------------------------------------------------------------------------------------
Group-x:       Gas Tracker
Description-y: Get Daily Average Gas Price​ Returns the daily average gas price used on the Ethereum network.
Endpoint-x:    https://api.etherscan.io/api?module=stats&action=dailyavggasprice&startdate=2019-02-01&enddate=2019-02-28&sort=asc&apikey=YourApiKeyToken 
Result:        {"status":"1","message":"OK","result":[{"UTCDate":"2019-02-01","unixTimeStamp":"1548979200","maxGasPrice_Wei":"60814303896257","minGasPrice_Wei":"432495","avgGasPrice_Wei":"13234562600"},{"UTCDate":"2019-02-27","unixTimeStamp":"1551225600","maxGasPrice_Wei":"42000000000000","minGasPrice_Wei":"1000000","avgGasPrice_Wei":"16334617513"},{"UTCDate":"2019-02-28","unixTimeStamp":"1551312000","maxGasPrice_Wei":"237222222222257","minGasPrice_Wei":"100000000","avgGasPrice_Wei":"18834674068"}]}

-----------------------------------------------------------------------------------------------------------------------------------------------------------------
Group-x:       Stats
Description-y: Get Total Supply of Ether Returns the current amount of Ether in circulation excluding ETH2 Staking rewards and EIP1559 burnt fees.
Endpoint-x:    https://api.etherscan.io/api?module=stats&action=ethsupply&apikey=YourApiKeyToken
Result:        {"status":"1","message":"OK","result":"116487067186500000000000000"}
​
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
Group-x:       Stats
Description-y: Get Total Supply of Ether 2 Returns the current amount of Ether in circulation, ETH2 Staking rewards, EIP1559 burnt fees, and total withdrawn ETH from the beacon chain. 
Endpoint-x:    https://api.etherscan.io/api?module=stats&action=ethsupply2&apikey=YourApiKeyToken
Result:        {"status":"1","message":"OK","result":{"EthSupply":"122373866217800000000000000","Eth2Staking":"1157529105115885000000000","BurntFees":"3102505506455601519229842""WithdrawnTotal":"1170200333006131000000000"}}
​
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
Group-x:       Stats
Description-y: Get Ether Last Price Returns the latest price of 1 ETH.
Endpoint-x:    https://api.etherscan.io/api?module=stats&action=ethprice&apikey=YourApiKeyToken
Result:        {"status":"1","message":"OK","result":{"ethbtc":"0.06116","ethbtc_timestamp":"1624961308","ethusd":"2149.18","ethusd_timestamp":"1624961308"}}
​
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
Group-x:       Stats
Description-y: Get Ethereum Nodes Size Returns the size of the Ethereum blockchain, in bytes, over a date range.
Endpoint-x:    https://api.etherscan.io/api?module=stats&action=chainsize&startdate=2019-02-01&enddate=2019-02-28&clienttype=geth&syncmode=default&sort=asc&apikey=YourApiKeyToken
Result:        {"status":"1","message":"OK","result":[{"blockNumber":"7156164","chainTimeStamp":"2019-02-01","chainSize":"184726421279","clientType":"Geth","syncMode":"Default"}{"blockNumber":"7276521","chainTimeStamp":"2019-02-28","chainSize":"197073145113","clientType":"Geth","syncMode":"Default"}]}
​
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
Group-x:       Stats
Description-y: Get Total Nodes Count Returns the total number of discoverable Ethereum nodes.
Endpoint-x:    https://api.etherscan.io/api?module=stats&action=nodecount&apikey=YourApiKeyToken
Result:        {"status":"1","message":"OK","result":{"UTCDate":"2021-06-29","TotalNodeCount":"6413"}}

-----------------------------------------------------------------------------------------------------------------------------------------------------------------
Group-x:       Stats
Description-y: Get Daily Network Transaction Fee ​Returns the amount of transaction fees paid to miners per day.
Endpoint-x:    https://api.etherscan.io/api?module=stats&action=dailytxnfee&startdate=2019-02-01&enddate=2019-02-28&sort=asc&apikey=YourApiKeyToken 
Result:        {"status":"1","message":"OK","result":[{"UTCDate":"2019-02-01","unixTimeStamp":"1548979200","transactionFee_Eth":"358.558440870590355682"}{"UTCDate":"2019-02-28","unixTimeStamp":"1551312000","transactionFee_Eth":"545.141762162356907132"}]}

-----------------------------------------------------------------------------------------------------------------------------------------------------------------
Group-x:       Stats
Description-y: Get Daily New Address Count ​Returns the number of new Ethereum addresses created per day.
Endpoint-x:    https://api.etherscan.io/api?module=stats&action=dailynewaddress&startdate=2019-02-01&enddate=2019-02-28&sort=asc&apikey=YourApiKeyToken 
Result:        {"status":"1","message":"OK","result":[{"UTCDate":"2019-02-01","unixTimeStamp":"1548979200","newAddressCount":54081},{"UTCDate":"2019-02-28","unixTimeStamp":"1551312000","newAddressCount":53117}]}

-----------------------------------------------------------------------------------------------------------------------------------------------------------------
Group-x:       Stats
Description-y: Get Daily Network Utilization ​Returns the daily average gas used over gas limit, in percentage.
Endpoint-x:    https://api.etherscan.io/api?module=stats&action=dailynetutilization&startdate=2019-02-01&enddate=2019-02-28&sort=asc&apikey=YourApiKeyToken 
Result:        {"status":"1","message":"OK","result":[{"UTCDate":"2019-02-01","unixTimeStamp":"1548979200","networkUtilization":"0.8464"},{"UTCDate":"2019-02-28","unixTimeStamp":"1551312000","networkUtilization":"0.9472"}]}

-----------------------------------------------------------------------------------------------------------------------------------------------------------------
Group-x:       Stats
Description-y: Get Daily Average Network Hash Rate ​Returns the historical measure of processing power of the Ethereum network.
Endpoint-x:    https://api.etherscan.io/api?module=stats&action=dailyavghashrate&startdate=2019-02-01&enddate=2019-02-28&sort=asc&apikey=YourApiKeyToken 
Result:        {"status":"1","message":"OK","result":[{"UTCDate":"2019-02-01","unixTimeStamp":"1548979200","networkHashRate":"143116.0140"},{"UTCDate":"2019-02-28","unixTimeStamp":"1551312000","networkHashRate":"157689.3983"}]}

-----------------------------------------------------------------------------------------------------------------------------------------------------------------
Group-x:       Stats
Description-y: Get Daily Transaction Count ​Returns the number of transactions performed on the Ethereum blockchain per day.
Endpoint-x:    https://api.etherscan.io/api?module=stats&action=dailytx&startdate=2019-02-01&enddate=2019-02-28&sort=asc&apikey=YourApiKeyToken 
Result:        {"status":"1","message":"OK","result":[{"UTCDate":"2019-02-01","unixTimeStamp":"1548979200","transactionCount":498856},{"UTCDate":"2019-02-28","unixTimeStamp":"1551312000","transactionCount":541458}]}

-----------------------------------------------------------------------------------------------------------------------------------------------------------------
Group-x:       Stats
Description-y: Get Daily Average Network Difficulty ​Returns the historical mining difficulty of the Ethereum network.
Endpoint-x:    https://api.etherscan.io/api?module=stats&action=dailyavgnetdifficulty&startdate=2019-02-01&enddate=2019-02-28&sort=asc&apikey=YourApiKeyToken 
Result:        {"status":"1","message":"OK","result":[{"UTCDate":"2019-02-01","unixTimeStamp":"1548979200","networkDifficulty":"2,408.028"},{"UTCDate":"2019-02-28","unixTimeStamp":"1551312000","networkDifficulty":"2,927.453"}]}

-----------------------------------------------------------------------------------------------------------------------------------------------------------------
Group-x:       Stats
Description-y: Get Ether Historical Daily Market Cap ​Returns the historical Ether daily market capitalization.
Endpoint-x:    https://api.etherscan.io/api?module=stats&action=ethdailymarketcap&startdate=2019-02-01&enddate=2019-02-28&sort=asc&apikey=YourApiKeyToken 
Result:        {"status":"1","message":"OK","result":[{"UTCDate":"2019-02-01","unixTimeStamp":"1548979200","supply":"104672819.281250","marketCap":"11203.1318476721875","price":"107.03"},{"UTCDate":"2019-02-28","unixTimeStamp":"1551312000","supply":"105048576.406250","marketCap":"14317.0704784078125","price":"136.29"}]}

-----------------------------------------------------------------------------------------------------------------------------------------------------------------
Group-x:       Stats
Description-y: Get Ether Historical Price ​Returns the historical price of 1 ETH.
Endpoint-x:    https://api.etherscan.io/api?module=stats&action=ethdailyprice&startdate=2019-02-01&enddate=2019-02-28&sort=asc&apikey=YourApiKeyToken 
Result:        {"status":"1","message":"OK","result":[{"UTCDate":"2019-02-01","unixTimeStamp":"1548979200","value":"107.03"},{"UTCDate":"2019-02-28","unixTimeStamp":"1551312000","value":"136.29"}]}

-----------------------------------------------------------------------------------------------------------------------------------------------------------------
Group-x:       Etherscan API PRO
Description-y: Get Historical Ether Balance for a Single Address By BlockNo ​Returns the balance of an address at a certain block height.
Endpoint-x:    https://api.etherscan.io/api?module=account&action=balancehistory&address=0xde0b295669a9fd93d5f28d9ec85e40f4cb697bae&blockno=8000000&apikey=YourApiKeyToken
Result:        {"status":"1","message":"OK","result":"610538078574759898951277"}

-----------------------------------------------------------------------------------------------------------------------------------------------------------------
Group-x:       Etherscan API PRO
Description-y: Get Daily Average Block Size ​Returns the daily average block size within a date range.
Endpoint-x:    https://api.etherscan.io/api?module=stats&action=dailyavgblocksize&startdate=2019-02-01&enddate=2019-02-28&sort=asc&apikey=YourApiKeyToken
Result:        {"status":"1","message":"OK","result":[{"UTCDate":"2019-02-01","unixTimeStamp":"1548979200","blockSize_bytes":20373},{"UTCDate":"2019-02-28","unixTimeStamp":"1551312000","blockSize_bytes":25117}]}

-----------------------------------------------------------------------------------------------------------------------------------------------------------------
Group-x:       Etherscan API PRO
Description-y: Get Daily Block Count and Rewards ​Returns the number of blocks mined daily and the amount of block rewards.
Endpoint-x:    https://api.etherscan.io/api?module=stats&action=dailyblkcount&startdate=2019-02-01&enddate=2019-02-28&sort=asc&apikey=YourApiKeyToken 
Result:        {"status":"1","message":"OK","result":[{"UTCDate":"2019-02-01","unixTimeStamp":"1548979200","blockCount":4848,"blockRewards_Eth":"14929.464690870590355682"},{"UTCDate":"2019-02-28","unixTimeStamp":"1551312000","blockCount":4366,"blockRewards_Eth":"12808.485512162356907132"}]}

-----------------------------------------------------------------------------------------------------------------------------------------------------------------
Group-x:       Etherscan API PRO
Description-y: Get Daily Block Rewards ​Returns the amount of block rewards distributed to miners daily.
Endpoint-x:    https://api.etherscan.io/api?module=stats&action=dailyblockrewards&startdate=2019-02-01&enddate=2019-02-28&sort=asc&apikey=YourApiKeyToken 
Result:        {"status":"1","message":"OK","result":[{"UTCDate":"2019-02-01","unixTimeStamp":"1548979200","blockRewards_Eth":"15300.65625"},{"UTCDate":"2019-02-28","unixTimeStamp":"1551312000","blockRewards_Eth":"12954.84375"}]}

-----------------------------------------------------------------------------------------------------------------------------------------------------------------
Group-x:       Etherscan API PRO
Description-y: Get Daily Average Time for A Block to be Included in the Ethereum Blockchain ​Returns the daily average of time needed for a block to be successfully mined.
Endpoint-x:    https://api.etherscan.io/api?module=stats&action=dailyavgblocktime&startdate=2019-02-01&enddate=2019-02-28&sort=asc&apikey=YourApiKeyToken 
Result:        {"status":"1","message":"OK","result":[{"UTCDate":"2019-02-01","unixTimeStamp":"1548979200","blockTime_sec":"17.67"},{"UTCDate":"2019-02-28","unixTimeStamp":"1551312000","blockTime_sec":"19.61"}]}

-----------------------------------------------------------------------------------------------------------------------------------------------------------------
Group-x:       Etherscan API PRO
Description-y: Get Daily Uncle Block Count and Rewards ​Returns the number of 'Uncle' blocks mined daily and the amount of 'Uncle' block rewards.
Endpoint-x:    https://api.etherscan.io/api?module=stats&action=dailyuncleblkcount&startdate=2019-02-01&enddate=2019-02-28&sort=asc&apikey=YourApiKeyToken 
Result:        {"status":"1","message":"OK","result":[{"UTCDate":"2019-02-01","unixTimeStamp":"1548979200","uncleBlockCount":287,"uncleBlockRewards_Eth":"729.75"},{"UTCDate":"2019-02-28","unixTimeStamp":"1551312000","uncleBlockCount":288,"uncleBlockRewards_Eth":"691.5"}]}

-----------------------------------------------------------------------------------------------------------------------------------------------------------------
Group-x:       Etherscan API PRO
Description-y: Get Historical ERC20-Token TotalSupply by ContractAddress & BlockNo ​Returns the amount of an ERC-20 token in circulation at a certain block height.
​Endpoint-x:    https://api.etherscan.io/api?module=stats&action=tokensupplyhistory&contractaddress=0x57d90b64a1a57749b0f932f1a3395792e12e7055&blockno=8000000&apikey=YourApiKeyToken 
Result:        {"status":"1","message":"OK","result":"21265524714464"}

-----------------------------------------------------------------------------------------------------------------------------------------------------------------
Group-x:       Etherscan API PRO
Description-y: Get Historical ERC20-Token Account Balance for TokenContractAddress by BlockNo ​Returns the balance of an ERC-20 token of an address at a certain block height.
​Endpoint-x:    https://api.etherscan.io/api?module=account&action=tokenbalancehistory&contractaddress=0x57d90b64a1a57749b0f932f1a3395792e12e7055&address=0xe04f27eb70e025b78871a2ad7eabe85e61212761&blockno=8000000&apikey=YourApiKeyToken 
Result:        {"status":"1","message":"OK","result":"135499"}
​
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
Group-x:       Etherscan API PRO
Description-y: Get Token Info by ContractAddress ​Returns project information and social media links of an ERC-20/ERC-721 token.
Endpoint-x:    https://api.etherscan.io/api?module=token&action=tokeninfo&contractaddress=0x0e3a2a1f2146d86a604adc220b4967a898d7fe07&apikey=YourApiKeyToken 
Result:        {"status":"1","message":"OK","result":[{"contractAddress":"0x0e3a2a1f2146d86a604adc220b4967a898d7fe07","tokenName":"Gods Unchained Cards","symbol":"CARD","divisor":"0","tokenType":"ERC721","totalSupply":"6962498","blueCheckmark":"true","description":"A TCG on the Ethereum blockchain that uses NFT's to bring real ownership to in-game assets.","website":"https://godsunchained.com/","email":"","blog":"https://medium.com/@fuelgames","reddit":"https://www.reddit.com/r/GodsUnchained/","slack":"","facebook":"https://www.facebook.com/godsunchained/","twitter":"https://twitter.com/godsunchained","bitcointalk":"","github":"","telegram":"","wechat":"","linkedin":"","discord":"https://discordapp.com/invite/DKGr2pW","whitepaper":"","tokenPriceUSD":"0.000000000000000000"}]}

-----------------------------------------------------------------------------------------------------------------------------------------------------------------
Group-x:       Etherscan API PRO
Description-y: Get Daily Average Gas Limit ​Returns the historical daily average gas limit of the Ethereum network.
Endpoint-x:    https://api.etherscan.io/api?module=stats&action=dailyavggaslimit&startdate=2019-02-01&enddate=2019-02-28&sort=asc&apikey=YourApiKeyToken 
Result:        {"status":"1","message":"OK","result":[{"UTCDate":"2019-02-01","unixTimeStamp":"1548979200","gasLimit":"8001360"},{"UTCDate":"2019-02-27","unixTimeStamp":"1551225600","gasLimit":"8001071"},{"UTCDate":"2019-02-28","unixTimeStamp":"1551312000","gasLimit":"8001137"}]}

-----------------------------------------------------------------------------------------------------------------------------------------------------------------
Group-x:       Etherscan API PRO
Description-y: Get Ethereum Daily Total Gas Used​ Returns the total amount of gas used daily for transctions on the Ethereum network.
Endpoint-x:    https://api.etherscan.io/api?module=stats&action=dailygasused&startdate=2019-02-01&enddate=2019-02-28&sort=asc&apikey=YourApiKeyToken 
Result:        {"status":"1","message":"OK","result":[{"UTCDate":"2019-02-01","unixTimeStamp":"1548979200","gasUsed":"32761450415"},{"UTCDate":"2019-02-27","unixTimeStamp":"1551225600","gasUsed":"32657440136"},{"UTCDate":"2019-02-28","unixTimeStamp":"1551312000","gasUsed":"33081119561"}]}

-----------------------------------------------------------------------------------------------------------------------------------------------------------------
Group-x:       Etherscan API PRO
Description-y: Get Daily Average Gas Price​ Returns the daily average gas price used on the Ethereum network.
Endpoint-x:    https://api.etherscan.io/api?module=stats&action=dailyavggasprice&startdate=2019-02-01&enddate=2019-02-28&sort=asc&apikey=YourApiKeyToken 
Result:        {"status":"1","message":"OK","result":[{"UTCDate":"2019-02-01","unixTimeStamp":"1548979200","maxGasPrice_Wei":"60814303896257","minGasPrice_Wei":"432495","avgGasPrice_Wei":"13234562600"},{"UTCDate":"2019-02-27","unixTimeStamp":"1551225600","maxGasPrice_Wei":"42000000000000","minGasPrice_Wei":"1000000","avgGasPrice_Wei":"16334617513"},{"UTCDate":"2019-02-28","unixTimeStamp":"1551312000","maxGasPrice_Wei":"237222222222257","minGasPrice_Wei":"100000000","avgGasPrice_Wei":"18834674068"}]}

-----------------------------------------------------------------------------------------------------------------------------------------------------------------
Group-x:       Etherscan API PRO
Description-y: Get Daily Network Transaction Fee ​Returns the amount of transaction fees paid to miners per day.
Endpoint-x:    https://api.etherscan.io/api?module=stats&action=dailytxnfee&startdate=2019-02-01&enddate=2019-02-28&sort=asc&apikey=YourApiKeyToken 
Result:        {"status":"1","message":"OK","result":[{"UTCDate":"2019-02-01","unixTimeStamp":"1548979200","transactionFee_Eth":"358.558440870590355682"}{"UTCDate":"2019-02-28","unixTimeStamp":"1551312000","transactionFee_Eth":"545.141762162356907132"}]}

-----------------------------------------------------------------------------------------------------------------------------------------------------------------
Group-x:       Etherscan API PRO
Description-y: Get Daily New Address Count ​Returns the number of new Ethereum addresses created per day.
Endpoint-x:    https://api.etherscan.io/api?module=stats&action=dailynewaddress&startdate=2019-02-01&enddate=2019-02-28&sort=asc&apikey=YourApiKeyToken 
Result:        {"status":"1","message":"OK","result":[{"UTCDate":"2019-02-01","unixTimeStamp":"1548979200","newAddressCount":54081},{"UTCDate":"2019-02-28","unixTimeStamp":"1551312000","newAddressCount":53117}]}

-----------------------------------------------------------------------------------------------------------------------------------------------------------------
Group-x:       Etherscan API PRO
Description-y: Get Daily Network Utilization ​Returns the daily average gas used over gas limit, in percentage.
Endpoint-x:    https://api.etherscan.io/api?module=stats&action=dailynetutilization&startdate=2019-02-01&enddate=2019-02-28&sort=asc&apikey=YourApiKeyToken 
Result:        {"status":"1","message":"OK","result":[{"UTCDate":"2019-02-01","unixTimeStamp":"1548979200","networkUtilization":"0.8464"},{"UTCDate":"2019-02-28","unixTimeStamp":"1551312000","networkUtilization":"0.9472"}]}

-----------------------------------------------------------------------------------------------------------------------------------------------------------------
Group-x:       Etherscan API PRO
Description-y: Get Daily Average Network Hash Rate ​Returns the historical measure of processing power of the Ethereum network.
Endpoint-x:    https://api.etherscan.io/api?module=stats&action=dailyavghashrate&startdate=2019-02-01&enddate=2019-02-28&sort=asc&apikey=YourApiKeyToken 
Result:        {"status":"1","message":"OK","result":[{"UTCDate":"2019-02-01","unixTimeStamp":"1548979200","networkHashRate":"143116.0140"},{"UTCDate":"2019-02-28","unixTimeStamp":"1551312000","networkHashRate":"157689.3983"}]}

-----------------------------------------------------------------------------------------------------------------------------------------------------------------
Group-x:       Etherscan API PRO
Description-y: Get Daily Transaction Count ​Returns the number of transactions performed on the Ethereum blockchain per day.
Endpoint-x:    https://api.etherscan.io/api?module=stats&action=dailytx&startdate=2019-02-01&enddate=2019-02-28&sort=asc&apikey=YourApiKeyToken 
Result:        {"status":"1","message":"OK","result":[{"UTCDate":"2019-02-01","unixTimeStamp":"1548979200","transactionCount":498856},{"UTCDate":"2019-02-28","unixTimeStamp":"1551312000","transactionCount":541458}]}

-----------------------------------------------------------------------------------------------------------------------------------------------------------------
Group-x:       Etherscan API PRO
Description-y: Get Daily Average Network Difficulty ​Returns the historical mining difficulty of the Ethereum network.
Endpoint-x:    https://api.etherscan.io/api?module=stats&action=dailyavgnetdifficulty&startdate=2019-02-01&enddate=2019-02-28&sort=asc&apikey=YourApiKeyToken 
Result:        {"status":"1","message":"OK","result":[{"UTCDate":"2019-02-01","unixTimeStamp":"1548979200","networkDifficulty":"2,408.028"},{"UTCDate":"2019-02-28","unixTimeStamp":"1551312000","networkDifficulty":"2,927.453"}]}

-----------------------------------------------------------------------------------------------------------------------------------------------------------------
Group-x:       Etherscan API PRO
Description-y: Get Ether Historical Daily Market Cap ​Returns the historical Ether daily market capitalization.
Endpoint-x:    https://api.etherscan.io/api?module=stats&action=ethdailymarketcap&startdate=2019-02-01&enddate=2019-02-28&sort=asc&apikey=YourApiKeyToken 
Result:        {"status":"1","message":"OK","result":[{"UTCDate":"2019-02-01","unixTimeStamp":"1548979200","supply":"104672819.281250","marketCap":"11203.1318476721875","price":"107.03"},{"UTCDate":"2019-02-28","unixTimeStamp":"1551312000","supply":"105048576.406250","marketCap":"14317.0704784078125","price":"136.29"}]}

-----------------------------------------------------------------------------------------------------------------------------------------------------------------
Group-x:       Etherscan API PRO
Description-y: Get Ether Historical Price ​Returns the historical price of 1 ETH.
Endpoint-x:    https://api.etherscan.io/api?module=stats&action=ethdailyprice&startdate=2019-02-01&enddate=2019-02-28&sort=asc&apikey=YourApiKeyToken 
Result:        {"status":"1","message":"OK","result":[{"UTCDate":"2019-02-01","unixTimeStamp":"1548979200","value":"107.03"},{"UTCDate":"2019-02-28","unixTimeStamp":"1551312000","value":"136.29"}]}
