// Copyright 2016, 2024 The TrueBlocks Authors. All rights reserved.
// Use of this source code is governed by a license that can
// be found in the LICENSE file.
/*
 * Parts of this file were auto generated. Edit only those parts of
 * the code inside of 'EXISTING_CODE' tags.
 */

package sdk

import (
	// EXISTING_CODE
	// EXISTING_CODE
)

type {{toCamel .Route}}OptionsInternal struct {
{{range .Options}}	{{.GoSdkName}} {{.GoSdkType}} {{.JsonTag}}
{{end}}	Globals
}

// String implements the stringer interface
func (opts *{{toCamel .Route}}OptionsInternal) String() string {
	bytes, _ := json.Marshal(opts)
	return string(bytes)
}

// {{toProper .Route}}Bytes implements the chifra {{toLower .Route}} command for the SDK.
func (opts *{{toCamel .Route}}OptionsInternal) {{toProper .Route}}Bytes(w io.Writer) error {
	values, err := structToValues(*opts)
	if err != nil {
		return fmt.Errorf("error converting {{toLower .Route}} struct to URL values: %v", err)
	}

	return {{.Pkg}}.{{toProper .Route}}(w, values)
}

// {{toLower .Route}}ParseFunc handles special cases such as structs and enums (if any).
func {{toLower .Route}}ParseFunc(target interface{}, key, value string) (bool, error) {
	var found bool
	{{.Enums3}}, ok := target.(*{{toCamel .Route}}OptionsInternal)
	if !ok {
		return false, fmt.Errorf("parseFunc({{toLower .Route}}): target is not of correct type")
	}

{{.Enums1}}
	// EXISTING_CODE
	// EXISTING_CODE

	return found, nil
}

// Get{{toProper .Route}}Options returns a filled-in options instance given a string array of arguments.
func Get{{toProper .Route}}Options(args []string) (*{{toCamel .Route}}OptionsInternal, error) {
	var opts {{toCamel .Route}}OptionsInternal
	if err := assignValuesFromArgs(args, {{toLower .Route}}ParseFunc, &opts, &opts.Globals); err != nil {
		return nil, err
	}

	return &opts, nil
}

{{if .HasSdkEndpoints}}type {{toCamel .Route}}Generic interface {
	{{.ReturnTypes}}
}

func query{{toProper .Route}}[T {{toCamel .Route}}Generic](opts *{{toCamel .Route}}OptionsInternal) ([]T, *types.MetaData, error) {
	buffer := bytes.Buffer{}
	if err := opts.{{toProper .Route}}Bytes(&buffer); err != nil {
		return nil, nil, err
	}

	var result Result[T]
	if err := json.Unmarshal(buffer.Bytes(), &result); err != nil {
		return nil, nil, err
	} else {
		return result.Data, &result.Meta, nil
	}
}

// toInternal converts the SDK options to the internal options format.
func (opts *{{toProper .Route}}Options) toInternal() *{{toCamel .Route}}OptionsInternal {
	return &{{toCamel .Route}}OptionsInternal{
{{range .Options}}{{if .IsPublicEndpoint}}		{{.GoSdkName}}: opts.{{.GoSdkName}},
{{end}}{{end}}		Globals: opts.Globals,
	}
}{{end}}

// EXISTING_CODE
// EXISTING_CODE
