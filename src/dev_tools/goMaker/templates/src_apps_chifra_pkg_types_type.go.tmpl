// Copyright 2016, 2024 The TrueBlocks Authors. All rights reserved.
// Use of this source code is governed by a license that can
// be found in the LICENSE file.
/*
 * Parts of this file were auto generated. Edit only those parts of
 * the code inside of 'EXISTING_CODE' tags.
 */

package types

// EXISTING_CODE
// EXISTING_CODE

type Raw{{.Class}} struct {
{{range .Members}}{{if .IsRawField}}{{.GoName}} {{.RawType}} {{.RawTag}}
{{end}}{{end}}	// EXISTING_CODE
	// EXISTING_CODE
}

type Simple{{.ModelName2}} struct {
{{range .Members}}{{if .IsSimpField}}{{.GoName}} {{.GoType}} {{.Tag}}
{{end}}{{end}}	raw *Raw{{.Class}} `json:"-"`
	// EXISTING_CODE
	// EXISTING_CODE
}

func (s *Simple{{.ModelName}}) String() string {
	bytes, _ := json.Marshal(s)
	return string(bytes)
}

func (s *Simple{{.ModelName}}) Raw() *Raw{{.Class}} {
	return s.raw
}

func (s *Simple{{.ModelName}}) SetRaw(raw *Raw{{.Class}}) {
	s.raw = raw
}

func (s *Simple{{.ModelName}}) Model(chain, format string, verbose bool, extraOptions map[string]any) Model {
	var model = map[string]interface{}{}
	var order = []string{}

	// EXISTING_CODE
	// EXISTING_CODE

	return Model{
		Data:  model,
		Order: order,
	}
}

{{if .HasTimestamp}} 
func (s *Simple{{.ModelName}}) Date() string {
	return utils.FormattedDate(s.Timestamp)
}
{{end}}

{{if .IsCachable}}
{{if not .IsMarshalOnly}}
{{if .IsCacheAsGroup}}
type Simple{{.Class}}{{if .IsCacheAsGroup}}Group{{end}} struct {
	BlockNumber      base.Blknum
	TransactionIndex base.Txnum
	{{if .NeedsAddress}}Address          base.Address
	{{end}}{{.Class}}s      []Simple{{.Class}}
}
{{end}}
func (s *Simple{{.ModelName}}{{if .IsCacheAsGroup}}Group{{end}}) CacheName() string {
	return "{{.Class}}"
}

func (s *Simple{{.ModelName}}{{if .IsCacheAsGroup}}Group{{end}}) CacheId() string {
	return fmt.Sprintf({{.CacheIdStr}})
}

func (s *Simple{{.ModelName}}{{if .IsCacheAsGroup}}Group{{end}}) CacheLocation() (directory string, extension string) {
	paddedId := s.CacheId()
	parts := make([]string, 3)
	parts[0] = paddedId[:2]
	parts[1] = paddedId[2:4]
	parts[2] = paddedId[4:6]

	subFolder := strings.ToLower(s.CacheName()) + "s"
	directory = filepath.Join(subFolder, filepath.Join(parts...))
	extension = "bin"

	return
}

{{if .IsCacheAsGroup}}
func (s *Simple{{.ModelName}}Group) MarshalCache(writer io.Writer) (err error) {
	return cache.WriteValue(writer, s.{{.Class}}s)
}

func (s *Simple{{.ModelName}}Group) UnmarshalCache(version uint64, reader io.Reader) (err error) {
	return cache.ReadValue(reader, &s.{{.Class}}s, version)
}

{{end}}
{{end}}
func (s *Simple{{.ModelName}}) MarshalCache(writer io.Writer) (err error) {
	{{range .Members}}{{.MarshalCode}}{{end}}

	return nil
}

func (s *Simple{{.ModelName3}}) UnmarshalCache(version uint64, reader io.Reader) (err error) {
	{{range .Members}}{{.UnmarshalCode}}{{end}}

	s.FinishUnmarshal()

	return nil
}
{{end}}

// FinishUnmarshal is used by the cache. It may be unused depending on auto-code-gen
func (s *Simple{{.ModelName}}) FinishUnmarshal() {
	// EXISTING_CODE
	// EXISTING_CODE
}

// EXISTING_CODE
// EXISTING_CODE
