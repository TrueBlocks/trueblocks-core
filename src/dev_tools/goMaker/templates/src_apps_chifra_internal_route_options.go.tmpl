// Copyright 2016, 2024 The TrueBlocks Authors. All rights reserved.
// Use of this source code is governed by a license that can
// be found in the LICENSE file.
/*
 * Parts of this file were auto generated. Edit only those parts of
 * the code inside of 'EXISTING_CODE' tags.
 */

package {{.Route}}Pkg

import (
	// EXISTING_CODE
	// EXISTING_CODE
)

// {{toProper .Route}}Options provides all command options for the chifra {{toLower .Route}} command.
type {{toProper .Route}}Options struct {
{{.OptFields}}	// EXISTING_CODE
	// EXISTING_CODE
}

var default{{toProper .Route}}Options = {{toProper .Route}}Options{
	{{.GoDefs}}
}

// testLog is used only during testing to export the options for this test case.
func (opts *{{toProper .Route}}Options) testLog() {
{{.TestLogs}}	opts.Conn.TestLog(opts.getCaches())
	opts.Globals.TestLog()
}

// String implements the Stringer interface
func (opts *{{toProper .Route}}Options) String() string {
	b, _ := json.MarshalIndent(opts, "", "  ")
	return string(b)
}

// {{toLower .Route}}FinishParseApi finishes the parsing for server invocations. Returns a new {{toProper .Route}}Options.
func {{toLower .Route}}FinishParseApi(w http.ResponseWriter, r *http.Request) *{{toProper .Route}}Options {
	values := r.URL.Query()
	if r.Header.Get("User-Agent") == "testRunner" {
		values.Set("testRunner", "true")
	}
	return {{toProper .Route}}FinishParseInternal(w, values)
}

func {{toProper .Route}}FinishParseInternal(w io.Writer, values url.Values) *{{toProper .Route}}Options {
	copy := default{{toProper .Route}}Options
	copy.Globals.Caps = getCaps()
	opts := &copy
{{.DefaultsApi true}}	for key, value := range values {
		switch key {
{{.RequestOpts}}		default:
			if !copy.Globals.Caps.HasKey(key) {
				err := validate.Usage("Invalid key ({0}) in {1} route.", key, "{{.Route}}")
				if opts.BadFlag == nil || opts.BadFlag.Error() > err.Error() {
					opts.BadFlag = err
				}
			}
		}
	}
	opts.Conn = opts.Globals.FinishParseApi(w, values, opts.getCaches())
{{.EnsConvert1}}{{if .HasDeprecated}}{{.DeprecatedTransfer}}{{end}}
	// EXISTING_CODE
	// EXISTING_CODE
{{.EnsConvert2}}
	return opts
}

// {{toLower .Route}}FinishParse finishes the parsing for command line invocations. Returns a new {{toProper .Route}}Options.
func {{toLower .Route}}FinishParse(args []string) *{{toProper .Route}}Options {
	// remove duplicates from args if any (not needed in api mode because the server does it).
	dedup := map[string]int{}
	if len(args) > 0 {
		tmp := []string{}
		for _, arg := range args {
			if value := dedup[arg]; value == 0 {
				tmp = append(tmp, arg)
			}
			dedup[arg]++
		}
		args = tmp
	}

	defFmt := "txt"
	opts := GetOptions()
	opts.Conn = opts.Globals.FinishParse(args, opts.getCaches())
{{.EnsConvert1}}{{if .HasDeprecated}}{{.DeprecatedTransfer}}{{end}}
	// EXISTING_CODE
	// EXISTING_CODE
{{.EnsConvert2}}	if len(opts.Globals.Format) == 0 || opts.Globals.Format == "none" {
		opts.Globals.Format = defFmt
	}

	return opts
}

func GetOptions() *{{toProper .Route}}Options {
	// EXISTING_CODE
	// EXISTING_CODE
	return &default{{toProper .Route}}Options
}

func getCaps() caps.Capability {
	{{.AddCaps}}	// EXISTING_CODE
	// EXISTING_CODE
	return capabilities
}

func ResetOptions(testMode bool) {
	// We want to keep writer between command file calls
	w := GetOptions().Globals.Writer
	opts := {{toProper .Route}}Options{}
	globals.SetDefaults(&opts.Globals)
	opts.Globals.TestMode = testMode
	opts.Globals.Writer = w
	opts.Globals.Caps = getCaps()
{{.DefaultsApi false}}	default{{toProper .Route}}Options = opts
}

func (opts *{{toProper .Route}}Options) getCaches() (m map[string]bool) {
	// EXISTING_CODE
	// EXISTING_CODE
	return
}

// EXISTING_CODE
// EXISTING_CODE
