// Copyright 2016, 2024 The TrueBlocks Authors. All rights reserved.
// Use of this source code is governed by a license that can
// be found in the LICENSE file.
/*
 * Parts of this file were auto generated. Edit only those parts of
 * the code inside of 'EXISTING_CODE' tags.
 */

package types

// EXISTING_CODE
// EXISTING_CODE

type {{.Class}} struct {
{{range .Members}}{{if .IsSimpField}}{{.GoName}} {{.GoType}} {{.Tag}}
{{end}}{{end}}	Calcs *{{.Class}}Calcs `json:"calcs,omitempty"`
	// EXISTING_CODE
	// EXISTING_CODE
}

func (s {{.Class}}) String() string {
	bytes, _ := json.Marshal(s)
	return string(bytes)
}

func (s *{{.Class}}) Model(chain, format string, verbose bool, extraOpts map[string]any) Model {
	props := NewModelProps(chain, format, verbose, extraOpts)

	rawNames := []Labeler{ {{if .HasAddresses}}{{range .Addresses}}
		NewLabeler(s.{{firstUpper .}}, "{{.}}"),{{end}}{{end}}
	}
	model := s.RawMap(props, &rawNames)
	for k, v := range s.CalcMap(props) {
		model[k] = v
	}

	var order = []string{}
	// EXISTING_CODE
	// EXISTING_CODE

	for _, item := range rawNames {
		key := item.name + "Name"
		if _, exists := model[key]; exists {
			order = append(order, key)
		}
	}
	order = reorderFields(order)

	return Model{
		Data:  model,
		Order: order,
	}
}

// RawMap returns a map containing only the raw/base fields for this {{.Class}}.
func (s *{{.Class}}) RawMap(p *ModelProps, needed *[]Labeler) map[string]any {
	model := map[string]any{
		// EXISTING_CODE
		// EXISTING_CODE
	}

	// EXISTING_CODE
	// EXISTING_CODE

	return labelAddresses(p, model, needed)
}

// CalcMap returns a map containing the calculated/derived fields for this type.
func (s *{{.Class}}) CalcMap(p *ModelProps) map[string]any {
	_ = p // delint
	model := map[string]any{
		// EXISTING_CODE
		// EXISTING_CODE
	}

	// EXISTING_CODE
	// EXISTING_CODE

	return model
}

{{if .HasTimestamp}} 
func (s *{{.Class}}) Date() string {
	return base.FormattedDate(s.Timestamp)
}
{{end}}

{{if .IsCachable}}
{{if not .IsMarshalOnly}}
func (s *{{.ClassOrClassGroup}}) CacheLocations() (string, string, string) {
{{if .IsFilenameCache}}	return file.GetPathParts(s.Filename){{else}}	paddedId := {{.CacheIdStr}}
	parts := make([]string, 3)
	parts[0] = paddedId[:2]
	parts[1] = paddedId[2:4]
	parts[2] = paddedId[4:6]
	subFolder := strings.ToLower("{{.CacheLoc}}") + "s"
	directory := filepath.Join(subFolder, filepath.Join(parts...))
	return directory, paddedId, "bin"{{end}}
}

{{if .IsCacheAsGroup}}
type {{.ClassOrClassGroup}} struct {
	BlockNumber      base.Blknum
	TransactionIndex base.Txnum
	{{if .NeedsAddress}}Address          base.Address
	{{end}}{{if .NeedsStatement}}Holder        base.Address
	Asset base.Address
	{{end}}{{.Class}}s      []{{.Class}}
}

func (s *{{.ClassOrClassGroup}}) MarshalCache(writer io.Writer) (err error) {
	return base.WriteValue(writer, s.{{.Class}}s)
}

func (s *{{.ClassOrClassGroup}}) UnmarshalCache(fileVersion uint64, reader io.Reader) (err error) {
	return base.ReadValue(reader, &s.{{.Class}}s, fileVersion)
}

{{end}}
{{end}}
func (s *{{.Class}}) MarshalCache(writer io.Writer) (err error) {
	{{range .Members}}{{.MarshalCode}}{{end}}

	return nil
}

func (s *{{.Class}}) UnmarshalCache(fileVersion uint64, reader io.Reader) (err error) {
	// Check for compatibility and return cache.ErrIncompatibleVersion to invalidate this item (see #3638)
	// EXISTING_CODE
	// EXISTING_CODE

	{{range .Members}}{{.UnmarshalCode}}{{end}}

	s.FinishUnmarshal(fileVersion)

	return nil
}
{{end}}

// FinishUnmarshal is used by the cache. It may be unused depending on auto-code-gen
func (s *{{.Class}}) FinishUnmarshal(fileVersion uint64) {
	_ = fileVersion
	s.Calcs = nil
	// EXISTING_CODE
	// EXISTING_CODE
}

// {{.Class}}Calcs holds lazy-loaded calculated fields for {{.Class}}
type {{.Class}}Calcs struct {
	// EXISTING_CODE
	// EXISTING_CODE
}

func (s *{{.Class}}) EnsureCalcs(p *ModelProps, fieldFilter []string) error {
	_ = fieldFilter // delint
	if s.Calcs != nil {
		return nil
	}

	calcMap := s.CalcMap(p)
	if len(calcMap) == 0 {
		return nil
	}

	jsonBytes, err := json.Marshal(calcMap)
	if err != nil {
		return err
	}

	s.Calcs = &{{.Class}}Calcs{}
	return json.Unmarshal(jsonBytes, s.Calcs)
}

// EXISTING_CODE
// EXISTING_CODE
