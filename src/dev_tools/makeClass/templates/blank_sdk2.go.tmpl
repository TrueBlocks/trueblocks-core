// Copyright 2024 The TrueBlocks Authors. All rights reserved.
// Use of this source code is governed by a license that can
// be found in the LICENSE file.
/*
 * Parts of this file were generated with makeClass --run. Edit only those parts of
 * the code inside of 'EXISTING_CODE' tags.
 */

package sdk

import (
	// EXISTING_CODE
	// EXISTING_CODE
)

type [{PROPER}]Options struct {
[{FIELDS}]	// EXISTING_CODE
	// EXISTING_CODE
}

// String implements the stringer interface
func (opts *[{PROPER}]Options) String() string {
	bytes, _ := json.Marshal(opts)
	return string(bytes)
}

// [{PROPER}] implements the chifra [{LOWER}] command for the SDK.
func (opts *[{PROPER}]Options) [{PROPER}](w io.Writer) error {
	values := make(url.Values)

[{CODE}]	// EXISTING_CODE
	// EXISTING_CODE
	opts.Globals.mapGlobals(values)

	return [{PKG}].[{PROPER}](w, values)
}

// [{LOWER}]ParseFunc handles specail cases such as structs and enums (if any).
func [{LOWER}]ParseFunc(target interface{}, key, value string) (bool, error) {
	var found bool
	opts, ok := target.(*[{PROPER}]Options)
	if !ok {
		return false, fmt.Errorf("parseFunc([{LOWER}]): target is not of correct type")
	}

[{ENUMTHING}]
	// EXISTING_CODE
	// EXISTING_CODE

	return found, nil
}

// Get[{PROPER}]Options returns a filled-in options instance given a string array of arguments.
func Get[{PROPER}]Options(args []string) (*[{PROPER}]Options, error) {
	var opts [{PROPER}]Options
	if err := assignValuesFromArgs(args, [{LOWER}]ParseFunc, &opts, &opts.Globals); err != nil {
		return nil, err
	}

	// EXISTING_CODE
	// EXISTING_CODE

	return &opts, nil
}

[{ENUMS}]// EXISTING_CODE
// EXISTING_CODE
