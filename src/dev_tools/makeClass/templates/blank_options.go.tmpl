// Copyright 2021 The TrueBlocks Authors. All rights reserved.
// Use of this source code is governed by a license that can
// be found in the LICENSE file.
/*
 * This file was auto generated with makeClass --gocmds. DO NOT EDIT.
 */

package [{ROUTE}]Pkg

import (
	"encoding/json"
	"fmt"
	"net/http"
	"strings"

	"github.com/TrueBlocks/trueblocks-core/src/apps/chifra/internal/globals"
[{CONFIGPKG}]	"github.com/TrueBlocks/trueblocks-core/src/apps/chifra/pkg/identifiers"
	"github.com/TrueBlocks/trueblocks-core/src/apps/chifra/pkg/logger"
	"github.com/TrueBlocks/trueblocks-core/src/apps/chifra/pkg/rpcClient/ens"
	"github.com/TrueBlocks/trueblocks-core/src/apps/chifra/pkg/utils"
	"github.com/TrueBlocks/trueblocks-core/src/apps/chifra/pkg/validate"
)

// [{PROPER}]Options provides all command options for the chifra [{LOWER}] command.
type [{PROPER}]Options struct {
[{OPT_FIELDS}]
}

var default[{PROPER}]Options = [{PROPER}]Options{[{GODEFS}]}

// testLog is used only during testing to export the options for this test case.
func (opts *[{PROPER}]Options) testLog() {
[{TEST_LOGS}]	opts.Globals.TestLog()
}

// String implements the Stringer interface
func (opts *[{PROPER}]Options) String() string {
	b, _ := json.MarshalIndent(opts, "", "  ")
	return string(b)
}

[{GETENVSTR}][{TOCMDLINE}]// [{LOWER}]FinishParseApi finishes the parsing for server invocations. Returns a new [{PROPER}]Options.
func [{LOWER}]FinishParseApi(w http.ResponseWriter, r *http.Request) *[{PROPER}]Options {
	copy := default[{PROPER}]Options
	opts := &copy
[{DEFAULTS_API}]	for key, value := range r.URL.Query() {
		switch key {
[{REQUEST_OPTS}]		default:
			if !globals.IsGlobalOption(key) {
				opts.BadFlag = validate.Usage("Invalid key ({0}) in {1} route.", key, "[{ROUTE}]")
				return opts
			}
		}
	}
	opts.Globals = *globals.GlobalsFinishParseApi(w, r)
	// EXISTING_CODE
	// EXISTING_CODE

	return opts
}

// [{LOWER}]FinishParse finishes the parsing for command line invocations. Returns a new [{PROPER}]Options.
func [{LOWER}]FinishParse(args []string) *[{PROPER}]Options {
	opts := GetOptions()
	opts.Globals.FinishParse(args)
	defFmt := "txt"
	// EXISTING_CODE
	// EXISTING_CODE
[{CONFIG_OVERRIDE}]	if len(opts.Globals.Format) == 0 || opts.Globals.Format == "none" {
		opts.Globals.Format = defFmt
	}
	return opts
}

func GetOptions() *[{PROPER}]Options {
	// EXISTING_CODE
	// EXISTING_CODE
	return &default[{PROPER}]Options
}

func ResetOptions() {
	// We want to keep writer between command file calls
	w := GetOptions().Globals.Writer
	default[{PROPER}]Options = [{PROPER}]Options{}
	globals.SetDefaults(&default[{PROPER}]Options.Globals)
	default[{PROPER}]Options.Globals.Writer = w
}
