abiTest  eth_test -s 7
ethereum test box test...
0. --------------------------------------------------------------------------------
	000.000 test_0                           ==> 
line: decode|decode donation tuple array (address token, uint256 amount, address recipient)[]|function donate((address+uint256+address)[])|0x000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000020000000000000000000000006b175474e89094c44da98b954eedeac495271d0f000000000000000000000000000000000000000000000000869d529b714a0000000000000000000000000000f503017d7baf7fbc0fff7492b751025c6a78179b0000000000000000000000006b175474e89094c44da98b954eedeac495271d0f00000000000000000000000000000000000000000000000003782dace9d9000000000000000000000000000000de4b13153673bcae2616b67bf822500d325fc3|[{"val_1":"0x6b175474e89094c44da98b954eedeac495271d0f", "val_2":"9700000000000000000", "val_3":"0xf503017d7baf7fbc0fff7492b751025c6a78179b"}, {"val_1":"0x6b175474e89094c44da98b954eedeac495271d0f", "val_2":"250000000000000000", "val_3":"0x00de4b13153673bcae2616b67bf822500d325fc3"}]
testType: decode
testName: decode donation tuple array (address token, uint256 amount, address recipient)[]
testSig: function donate((address+uint256+address)[]) --> donate((address,uint256,address)[])

--------------------------------------------------
==================================================

expected: [{"val_1":"0x6b175474e89094c44da98b954eedeac495271d0f", "val_2":"9700000000000000000", "val_3":"0xf503017d7baf7fbc0fff7492b751025c6a78179b"}, {"val_1":"0x6b175474e89094c44da98b954eedeac495271d0f", "val_2":"250000000000000000", "val_3":"0x00de4b13153673bcae2616b67bf822500d325fc3"}] ?
result:   [{"val_1":"0x6b175474e89094c44da98b954eedeac495271d0f", "val_2":"9700000000000000000", "val_3":"0xf503017d7baf7fbc0fff7492b751025c6a78179b"}, {"val_1":"0x6b175474e89094c44da98b954eedeac495271d0f", "val_2":"250000000000000000", "val_3":"0x00de4b13153673bcae2616b67bf822500d325fc3"}] ? 1
testName: decode donation tuple array (address token, uint256 amount, address recipient)[]
passed 'func.doTest(line)' is true
--------------------------------------------------------------------------------
	000.001 test_1                           ==> 
line: decode|decode complicated multi level tuple|function exec((uint256,address,(address,address),uint256,((address,bytes)[],(address,bytes,uint8,uint8,uint256,bool)[],uint256,uint256)[],uint256,uint256,uint256))|0x00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000061000000000000000000000000fa68257a6c10eb3ee3fc3506a34d7870fc8d5f45000000000000000000000000fa68257a6c10eb3ee3fc3506a34d7870fc8d5f450000000000000000000000000c25452d20cdfeed2983fa9b9b9cf4e81d6f2fec000000000000000000000000000000000000000000000000000000000000aae600000000000000000000000000000000000000000000000000000002e90edd000|[[[1, 2], [3, 4], [5, 6]], [[1, 2], [3, 4], [5, 6]]], 10
testType: decode
testName: decode complicated multi level tuple
testSig: function exec((uint256,address,(address,address),uint256,((address,bytes)[],(address,bytes,uint8,uint8,uint256,bool)[],uint256,uint256)[],uint256,uint256,uint256)) --> exec((uint256,address,(address,address),uint256,((address,bytes)[],(address,bytes,uint8,uint8,uint256,bool)[],uint256,uint256)[],uint256,uint256,uint256))

--------------------------------------------------
==================================================

expected: [[[1, 2], [3, 4], [5, 6]], [[1, 2], [3, 4], [5, 6]]], 10 ?
result:   0, 0x0000000000000000000000000000000000000061, 0xfa68257a6c10eb3ee3fc3506a34d7870fc8d5f45, 0xfa68257a6c10eb3ee3fc3506a34d7870fc8d5f45, 69339042926272397489363250159416854579449376738, 0x0000000000000000000000000000000000000000, [0x0000000000000000000000000000000000000000000000000000000000000001], 0x0000000000000000000000000000000000000000, 0x0000000000000000000000000000000000000000000000000000000000000061, 1, 1, 32, , , , ? 0
testName: decode complicated multi level tuple
passed 'func.doTest(line)' is true
--------------------------------------------------------------------------------
	000.002 test_2                           ==> 
line: decode|decode complicated multi level tuple|function operate((address+uint256)[] accounts,(uint8+uint256,(bool+uint8+uint8+uint256),uint256+uint256+address+uint256+bytes)[] actions)|0x000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000002000000000000000000000000370e4d84b8e8bf093856d23cb4043b095214c3340b2691ef8672010ee086710f419be9e6c33654a11624d2877a8f5770096d102a000000000000000000000000370e4d84b8e8bf093856d23cb4043b095214c33400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000001e000000000000000000000000000000000000000000000000000000000000003a0000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000009002bab9a0f5daa535d3d0c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000ab33e884ec8fed4f5867246e4300228f3d6665610000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000016000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000097f769f05a23980000000000000000000000000000000000000000000000000000de0b6b3aece224fbc24d40b446c6a94a142dc41fae76f2d0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000016000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000005cdb5c15|[{"val_1":"0x370e4d84b8e8bf093856d23cb4043b095214c334", "val_2":"5043588733683792621175946945497712124696440476173407745608908406314328985642"}, {"val_1":"0x370e4d84b8e8bf093856d23cb4043b095214c334", "val_2":"0"}], 0, {"val_1":"false", "val_2":"52", "val_3":"42", "val_4":"314313455637166220426001862249185256324161913652"}, []
testType: decode
testName: decode complicated multi level tuple
testSig: function operate((address+uint256)[] accounts,(uint8+uint256,(bool+uint8+uint8+uint256),uint256+uint256+address+uint256+bytes)[] actions) --> operate((address,uint256)[],(uint8,uint256)<(uint8,uint256)>uint8+uint256,(bool,uint8,uint8,uint256),uint256+uint256+address+uint256+bytes)[])

--------------------------------------------------
==================================================

expected: [{"val_1":"0x370e4d84b8e8bf093856d23cb4043b095214c334", "val_2":"5043588733683792621175946945497712124696440476173407745608908406314328985642"}, {"val_1":"0x370e4d84b8e8bf093856d23cb4043b095214c334", "val_2":"0"}], 0, {"val_1":"false", "val_2":"52", "val_3":"42", "val_4":"314313455637166220426001862249185256324161913652"}, [] ?
result:   [{"val_1":"0x370e4d84b8e8bf093856d23cb4043b095214c334", "val_2":"5043588733683792621175946945497712124696440476173407745608908406314328985642"}, {"val_1":"0x370e4d84b8e8bf093856d23cb4043b095214c334", "val_2":"0"}], 0, {"val_1":"false", "val_2":"52", "val_3":"42", "val_4":"314313455637166220426001862249185256324161913652"}, ? 0
testName: decode complicated multi level tuple
passed 'func.doTest(line)' is true
--------------------------------------------------------------------------------
	000.003 test_3                           ==> 
line: decode|an older example of arrays with bad data|function multiTransfer(address[],uint256[])|0xdd2f1e6e498202e86d8f5442af596580a4f03c2c5088d623ba0fcf0131e0897a91734a4d83596aa0000000000000000000000000000000000000000000000000000000000bebc2000000000000000000000000000000000000000000000000000000000011e1a300|fail
testType: decode
testName: an older example of arrays with bad data
testSig: function multiTransfer(address[],uint256[]) --> multiTransfer(address[],uint256[])

--------------------------------------------------
==================================================

expected: fail ?
result:   fail ? 1
testName: an older example of arrays with bad data
passed 'func.doTest(line)' is true
...passed

Done...
