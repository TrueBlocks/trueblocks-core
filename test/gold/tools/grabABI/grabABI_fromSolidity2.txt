chifra abis  --sol 0x7d655c57f71464b6f83811c55d84009cd9f5221c --fmt json
contract ReentrancyGuard {
contract Context {
function _msgSender() view returns (address payable) {}
function _msgData() view returns (bytes) {}
contract Pausable is Context {
event Paused(address account);
event Unpaused(address account);
function paused() public view returns (bool) {}
function _pause() whenNotPaused {}
function _unpause() whenPaused {}
contract Ownable is Context {
event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
function owner() public view returns (address) {}
function renounceOwnership() public onlyOwner {}
function transferOwnership(address newOwner) public onlyOwner {}
interface IERC20 {
function totalSupply() view returns (uint256);
function balanceOf(address account) view returns (uint256);
function transfer(address recipient, uint256 amount) returns (bool);
function allowance(address owner, address spender) view returns (uint256);
function approve(address spender, uint256 amount) returns (bool);
function transferFrom(address sender,address recipient,uint256 amount) returns (bool);
event Transfer(address indexed from, address indexed to, uint256 value);
event Approval(address indexed owner, address indexed spender, uint256 value);
library Address {
function isContract(address account) view returns (bool) {}
function sendValue(address payable recipient, uint256 amount) {}
library SafeMath {
function add(uint256 a, uint256 b) returns (uint256) {}
function sub(uint256 a, uint256 b) returns (uint256) {}
function sub(uint256 a,uint256 b,string errorMessage) returns (uint256) {}
function mul(uint256 a, uint256 b) returns (uint256) {}
function div(uint256 a, uint256 b) returns (uint256) {}
function div(uint256 a,uint256 b,string errorMessage) returns (uint256) {}
function mod(uint256 a, uint256 b) returns (uint256) {}
function mod(uint256 a,uint256 b,string errorMessage) returns (uint256) {}
library SafeERC20 {
function safeTransfer(IERC20 token,address to,uint256 value) {}
function safeTransferFrom(IERC20 token,address from,address to,uint256 value) {}
function safeApprove(IERC20 token,address spender,uint256 value) {}
function safeIncreaseAllowance(IERC20 token,address spender,uint256 value) {}
function safeDecreaseAllowance(IERC20 token,address spender,uint256 value) {}
function _callOptionalReturn(IERC20 token, bytes data) {}
contract BulkCheckout is Ownable, Pausable, ReentrancyGuard {
struct Donation {address token; uint256 amount; address payable dest; }
event DonationSent(address indexed token,uint256 indexed amount,address dest,address indexed donor);
event TokenWithdrawn(address indexed token, uint256 indexed amount, address indexed dest);
function donate(Donation[] _donations) payable nonReentrant whenNotPaused {}
function withdrawToken(address _tokenAddress, address _dest) onlyOwner {}
function withdrawEther(address payable _dest) onlyOwner {}
function pause() onlyOwner whenNotPaused {}
function unpause() onlyOwner whenPaused {}
0x7d655c57f71464b6f83811c55d84009cd9f5221c coverted in current folder.
